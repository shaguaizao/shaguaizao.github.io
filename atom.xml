<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shaguaizao&#39;s blog</title>
  
  <subtitle>多学一点知识，少写一行代码</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-05-05T19:07:11.291Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>shaguaizao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>病情自诉</title>
    <link href="http://yoursite.com/2023/05/06/%E7%97%85%E6%83%85%E8%87%AA%E8%AF%89/"/>
    <id>http://yoursite.com/2023/05/06/%E7%97%85%E6%83%85%E8%87%AA%E8%AF%89/</id>
    <published>2023-05-05T19:07:11.000Z</published>
    <updated>2023-05-05T19:07:11.291Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>开心鬼救开心鬼</title>
    <link href="http://yoursite.com/2022/05/20/%E5%BC%80%E5%BF%83%E9%AC%BC%E6%95%91%E5%BC%80%E5%BF%83%E9%AC%BC/"/>
    <id>http://yoursite.com/2022/05/20/%E5%BC%80%E5%BF%83%E9%AC%BC%E6%95%91%E5%BC%80%E5%BF%83%E9%AC%BC/</id>
    <published>2022-05-19T17:18:17.000Z</published>
    <updated>2022-05-19T17:20:54.398Z</updated>
    
    <content type="html"><![CDATA[<p>5月18日晚看了刚出的《开心鬼救开心鬼》蓝光版，电影意外的好看，除了天马行空的搞笑场景，影片开头部分的点名也颇为亮眼，表明了当时香港电影人对学潮的态度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;5月18日晚看了刚出的《开心鬼救开心鬼》蓝光版，电影意外的好看，除了天马行空的搞笑场景，影片开头部分的点名也颇为亮眼，表明了当时香港电影人对学潮的态度。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="电影" scheme="http://yoursite.com/tags/电影/"/>
    
  </entry>
  
  <entry>
    <title>湿疹的特效药</title>
    <link href="http://yoursite.com/2022/05/17/%E6%B9%BF%E7%96%B9%E7%9A%84%E7%89%B9%E6%95%88%E8%8D%AF/"/>
    <id>http://yoursite.com/2022/05/17/%E6%B9%BF%E7%96%B9%E7%9A%84%E7%89%B9%E6%95%88%E8%8D%AF/</id>
    <published>2022-05-16T16:41:34.000Z</published>
    <updated>2022-05-16T17:01:47.983Z</updated>
    
    <content type="html"><![CDATA[<p>​        最近湿疹似乎终于找到特效药了，是盐酸左西替利嗪片，这款药非常便宜，在医院开的话仅需2块多钱一盒，但是效果缺出奇的好。</p><p><img src="https://ptpimg.me/jtn803.jpg" alt="alt 处方"></p><p><img src="https://ptpimg.me/2i70ea.jpg" alt="alt 盐酸左西替利嗪片"></p><p>​        持续了5、6年的湿疹前段又爆发了，晚上睡觉的时候大腿内测非常痒，涂了中国医学科学院自研的一些药膏，似乎效果有限，但是上次医生给我开的盐酸左西替利嗪片，却起到了意想不到的效果。本来我对这款药也不报什么期望，因为这几年来，我几乎试遍了各种湿疹药，效果都不佳。但最近几天吃了这款药之后，明显感觉晚上睡觉不痒了，和光涂药，而不吃盐酸左西替利嗪片，效果差异巨大。</p><p>​        吃几个星期看看，看能不能彻底根除湿疹。最近几年病魔缠身，生活质量下降很严重，只能期待以后身体能越来越健康了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        最近湿疹似乎终于找到特效药了，是盐酸左西替利嗪片，这款药非常便宜，在医院开的话仅需2块多钱一盒，但是效果缺出奇的好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ptpimg.me/jtn803.jpg&quot; alt=&quot;alt 处方&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="湿疹" scheme="http://yoursite.com/tags/湿疹/"/>
    
  </entry>
  
  <entry>
    <title>武斗中的爱情</title>
    <link href="http://yoursite.com/2022/05/15/%E6%AD%A6%E6%96%97%E4%B8%AD%E7%9A%84%E7%88%B1%E6%83%85/"/>
    <id>http://yoursite.com/2022/05/15/%E6%AD%A6%E6%96%97%E4%B8%AD%E7%9A%84%E7%88%B1%E6%83%85/</id>
    <published>2022-05-15T15:49:33.000Z</published>
    <updated>2022-05-15T16:09:15.339Z</updated>
    
    <content type="html"><![CDATA[<p>知道《枫》这部电影很久，但大概因为没有明星演员，也不是大导演的作品，所以一直没静下心来看。最近看到纪念王小波的文章中提到，“小波很少夸过哪部电影好，唯一的例外是一部写文革的《枫》”于是5月14日下午看了一下这部作品。</p><p>片子不复杂，主要讲的是一对恋人在文革期间加入不同的造反派，两派为了抢班夺权进行了激烈的武斗。在一次激烈的战斗中，女孩被男孩所在造反派包围，悲愤中跳楼自杀；而男孩被女孩所在造反派污蔑女孩是被其逼死，最后遭枪杀。</p><p>这好像是国内唯一一部反应文革武斗的电影，这也是本片最大的亮点。</p><p>演员表演上受话剧腔和革命电影中的舞台形象影响较大，有时感觉在看话剧。</p><p>没怎么了解武斗的历史，不过看这部影片感觉还是相当激烈，最残酷的是，一个大概12、3岁的小男孩也加入的战斗中，最后被另一派枪杀。武斗的残酷和一般战争无异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;知道《枫》这部电影很久，但大概因为没有明星演员，也不是大导演的作品，所以一直没静下心来看。最近看到纪念王小波的文章中提到，“小波很少夸过哪部电影好，唯一的例外是一部写文革的《枫》”于是5月14日下午看了一下这部作品。&lt;/p&gt;
&lt;p&gt;片子不复杂，主要讲的是一对恋人在文革期间加</summary>
      
    
    
    
    
    <category term="文革 武斗 爱情" scheme="http://yoursite.com/tags/文革-武斗-爱情/"/>
    
  </entry>
  
  <entry>
    <title>博客重新开张</title>
    <link href="http://yoursite.com/2022/04/22/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%BC%A0/"/>
    <id>http://yoursite.com/2022/04/22/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E5%BC%80%E5%BC%A0/</id>
    <published>2022-04-21T17:40:34.000Z</published>
    <updated>2022-04-21T17:53:55.762Z</updated>
    
    <content type="html"><![CDATA[<p>时间过的好快，没想到这么快6年就过去了，这6年发生了很多事。我也因不知怎么在新电脑使用hexo发布博客，就不再更新此了。但最近总觉得有很多事有必要记录下来，要不然人生很快就过去了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时间过的好快，没想到这么快6年就过去了，这6年发生了很多事。我也因不知怎么在新电脑使用hexo发布博客，就不再更新此了。但最近总觉得有很多事有必要记录下来，要不然人生很快就过去了。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="人生" scheme="http://yoursite.com/tags/人生/"/>
    
  </entry>
  
  <entry>
    <title>《极客与团队》读书笔记</title>
    <link href="http://yoursite.com/2016/10/03/%E3%80%8A%E6%9E%81%E5%AE%A2%E4%B8%8E%E5%9B%A2%E9%98%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/10/03/%E3%80%8A%E6%9E%81%E5%AE%A2%E4%B8%8E%E5%9B%A2%E9%98%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2016-10-03T12:32:34.000Z</published>
    <updated>2016-10-06T04:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-天才程序员的传说"><a href="#第一章-天才程序员的传说" class="headerlink" title="第一章 天才程序员的传说"></a>第一章 天才程序员的传说</h1><h2 id="隐瞒是有害的"><a href="#隐瞒是有害的" class="headerlink" title="隐瞒是有害的"></a>隐瞒是有害的</h2><ol><li>你怎么知道自己选的路是对的？</li><li>分享可以强化“公车因子”</li></ol><h2 id="团队才是王道"><a href="#团队才是王道" class="headerlink" title="团队才是王道"></a>团队才是王道</h2><blockquote><p>在编程领域里，真正的独行侠是很罕见的——就算他们真的存在，他们的非凡成就也不是凭空而来的。</p></blockquote><a id="more"></a><h2 id="三支柱HTR"><a href="#三支柱HTR" class="headerlink" title="三支柱HTR"></a>三支柱HTR</h2><ol><li>谦虚</li><li>尊重</li><li>信任</li></ol><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ul><li>放下自负</li><li>学会批评和接受批评<blockquote><p>批评同事时把责任归到自己头上，让对方不至于太抵触</p></blockquote></li><li>快速失败；学习；迭代<blockquote><p>google的格言之一就是“失败是可以接受的”</p></blockquote></li><li>学会保持耐心</li><li>对影响保持开放的态度<blockquote><p>你越是容易受影响，你就越能影响别人；你越是示弱，你就越强壮。</p></blockquote></li></ul><h1 id="第二章-培养出色的团队文化"><a href="#第二章-培养出色的团队文化" class="headerlink" title="第二章 培养出色的团队文化"></a>第二章 培养出色的团队文化</h1><blockquote><p>团队文化就像是一块含有酵母的面团：酵母（团队创始人）能将菌群培养物植入生面团（团队新人），从而变出一块好吃的面包（团队）。</p></blockquote><h2 id="优秀团队文化中的沟通模式"><a href="#优秀团队文化中的沟通模式" class="headerlink" title="优秀团队文化中的沟通模式"></a>优秀团队文化中的沟通模式</h2><blockquote><p>原则之一就是在同步沟通的时候（比如开会），人越少越好。而在移步沟通的时候（比如email），涉及的听众越多越好。</p></blockquote><p><code>任务宗旨要准确地定义产品的方向和范围。</code></p><h3 id="开会贴士："><a href="#开会贴士：" class="headerlink" title="开会贴士："></a>开会贴士：</h3><ul><li>只邀请一定要参加的人；</li><li>开会前要决定好议程，而且要事先通知所有人；</li><li>达成目的后应提早散会；</li><li>注意别跑题；</li><li>尽量把会议安排在休息时间前后（比如午饭时间，下班前等）。</li></ul><h3 id="设计文档"><a href="#设计文档" class="headerlink" title="设计文档"></a>设计文档</h3><blockquote><p>勾勒出整个项目的前景，也直白地告诉整个团队你想做什么以及打算怎么做。</p></blockquote><h3 id="每日进行的讨论"><a href="#每日进行的讨论" class="headerlink" title="每日进行的讨论"></a>每日进行的讨论</h3><ul><li>邮件列表</li><li>在线聊天（强烈推荐采用群聊的方式）</li></ul><h3 id="使用bug跟踪系统"><a href="#使用bug跟踪系统" class="headerlink" title="使用bug跟踪系统"></a>使用bug跟踪系统</h3><blockquote><p>每个提交都必须经过代码审核</p></blockquote><h1 id="第三章-大海航行靠船长"><a href="#第三章-大海航行靠船长" class="headerlink" title="第三章 大海航行靠船长"></a>第三章 大海航行靠船长</h1><h2 id="仆人式领导"><a href="#仆人式领导" class="headerlink" title="仆人式领导"></a>仆人式领导</h2><blockquote><p>千万别新官上任三把火</p></blockquote><h2 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h2><ul><li>努力去雇用那些比你聪明、可以替代你的人。</li><li>帮助一个腿脚不便的人学着再走路，然后慢跑，最后赶上大家的步伐。“希望可不是一种策略”</li><li>和大家一起吃午饭是拉近距离的好办法。</li></ul><h2 id="领袖的处事之道"><a href="#领袖的处事之道" class="headerlink" title="领袖的处事之道"></a>领袖的处事之道</h2><h3 id="（一）放下自负"><a href="#（一）放下自负" class="headerlink" title="（一）放下自负"></a>（一）放下自负</h3><ul><li>信任自己的团队</li><li>为自己的错误道歉</li></ul><h3 id="（二）做一个禅师"><a href="#（二）做一个禅师" class="headerlink" title="（二）做一个禅师"></a>（二）做一个禅师</h3><ul><li>保持淡定和冷静</li><li>提问</li></ul><h3 id="（三）成为催化剂"><a href="#（三）成为催化剂" class="headerlink" title="（三）成为催化剂"></a>（三）成为催化剂</h3><h3 id="（四）当一个导师"><a href="#（四）当一个导师" class="headerlink" title="（四）当一个导师"></a>（四）当一个导师</h3><ul><li>熟悉团队的流程和系统</li><li>向他人解释事物的能力</li><li>以及估计被指导的人到底需要多少帮助的能力</li></ul><h3 id="（五）设置明确的目标"><a href="#（五）设置明确的目标" class="headerlink" title="（五）设置明确的目标"></a>（五）设置明确的目标</h3><h3 id="（六）坦诚"><a href="#（六）坦诚" class="headerlink" title="（六）坦诚"></a>（六）坦诚</h3><h3 id="（七）记录快乐程度"><a href="#（七）记录快乐程度" class="headerlink" title="（七）记录快乐程度"></a>（七）记录快乐程度</h3><h3 id="（八）其它建议和窍门"><a href="#（八）其它建议和窍门" class="headerlink" title="（八）其它建议和窍门"></a>（八）其它建议和窍门</h3><ul><li>不比事事躬亲，但也不能当甩手掌柜</li><li>寻找接班人</li><li>知道什么时候要做恶人</li><li>保护团队不受混乱干扰</li></ul><h1 id="第四章-对付害群之马"><a href="#第四章-对付害群之马" class="headerlink" title="第四章 对付害群之马"></a>第四章 对付害群之马</h1><h2 id="什么是“害群”"><a href="#什么是“害群”" class="headerlink" title="什么是“害群”"></a>什么是“害群”</h2><ul><li>不尊重别人的时间</li><li>自负</li><li>过分索求</li><li>幼稚或莫名其妙的交流</li><li>偏执妄想</li><li>完美主义</li><li>对抗有害行为</li></ul><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ul><li>转移完美主义者的注意力</li><li>别去搭理那些挑衅的家伙</li><li>别太感情用事</li><li>抓住重点</li><li>对付挑衅要不卑不亢</li><li>知道什么时候应该放弃</li><li>关注长远</li></ul><h1 id="第五章-操纵组织的艺术"><a href="#第五章-操纵组织的艺术" class="headerlink" title="第五章 操纵组织的艺术"></a>第五章 操纵组织的艺术</h1><blockquote><p>如果你从来没失败过，那说明你太保守了。</p></blockquote><h2 id="操纵你的组织"><a href="#操纵你的组织" class="headerlink" title="操纵你的组织"></a>操纵你的组织</h2><ul><li>要知道公司的底线在哪里</li><li><p>路是人走出来的</p><blockquote><p>坏习惯是停不下来的，你只有用一个好习惯去替换掉它</p></blockquote></li><li><p>学习向上管理</p><blockquote><p>确保你的经理以及团队之外的人不但知道你在干嘛，还要知道你干得很棒</p></blockquote></li><li><p>运气和互惠的经济学</p></li><li>晋升到一个安全的位置上</li><li>和有能量的人交朋友</li><li>如何通过email向忙碌的管理层求助<blockquote><p>越短的email越有机会得到回复；三个论点，一个行动</p></blockquote></li></ul><h1 id="第六章-用户也是人"><a href="#第六章-用户也是人" class="headerlink" title="第六章 用户也是人"></a>第六章 用户也是人</h1><h2 id="管理大众的印象"><a href="#管理大众的印象" class="headerlink" title="管理大众的印象"></a>管理大众的印象</h2><ul><li><p>注意第一印象</p><blockquote><p>承诺的时候要谨言，做产品的时候要超出预期</p></blockquote></li><li><p>尊重业界分析师</p></li><li>软件好不好用？</li></ul><h2 id="把注意力直接放在用户身上"><a href="#把注意力直接放在用户身上" class="headerlink" title="把注意力直接放在用户身上"></a>把注意力直接放在用户身上</h2><ul><li>选择你的用户</li><li>考虑入门的门槛</li><li>衡量使用数量，而不是用户数量</li><li>速度很重要</li><li>不要大而全</li><li>别偷懒</li><li>隐藏复杂性</li></ul><h2 id="管理和用户之间的关系"><a href="#管理和用户之间的关系" class="headerlink" title="管理和用户之间的关系"></a>管理和用户之间的关系</h2><h3 id="衡量用户满意度的趋势"><a href="#衡量用户满意度的趋势" class="headerlink" title="衡量用户满意度的趋势"></a>衡量用户满意度的趋势</h3><ul><li>不要有优越感</li><li>保持耐心</li><li>营造信任和愉悦的氛围</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第一章-天才程序员的传说&quot;&gt;&lt;a href=&quot;#第一章-天才程序员的传说&quot; class=&quot;headerlink&quot; title=&quot;第一章 天才程序员的传说&quot;&gt;&lt;/a&gt;第一章 天才程序员的传说&lt;/h1&gt;&lt;h2 id=&quot;隐瞒是有害的&quot;&gt;&lt;a href=&quot;#隐瞒是有害的&quot; class=&quot;headerlink&quot; title=&quot;隐瞒是有害的&quot;&gt;&lt;/a&gt;隐瞒是有害的&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;你怎么知道自己选的路是对的？&lt;/li&gt;
&lt;li&gt;分享可以强化“公车因子”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;团队才是王道&quot;&gt;&lt;a href=&quot;#团队才是王道&quot; class=&quot;headerlink&quot; title=&quot;团队才是王道&quot;&gt;&lt;/a&gt;团队才是王道&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在编程领域里，真正的独行侠是很罕见的——就算他们真的存在，他们的非凡成就也不是凭空而来的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="管理" scheme="http://yoursite.com/categories/管理/"/>
    
    
    <category term="项目管理" scheme="http://yoursite.com/tags/项目管理/"/>
    
  </entry>
  
  <entry>
    <title>《重来》读书笔记</title>
    <link href="http://yoursite.com/2016/09/28/%E3%80%8A%E9%87%8D%E6%9D%A5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/28/%E3%80%8A%E9%87%8D%E6%9D%A5%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2016-09-27T16:00:00.000Z</published>
    <updated>2016-10-03T12:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卸负篇"><a href="#卸负篇" class="headerlink" title="卸负篇"></a>卸负篇</h1><h2 id="忘了现实世界"><a href="#忘了现实世界" class="headerlink" title="忘了现实世界"></a>忘了现实世界</h2><p>“现实世界”并不存在，那只是个借口，只是某些人为了开脱自己的无所作为，跟你一点关系也没有。</p><h2 id="哪来的从错误中学习"><a href="#哪来的从错误中学习" class="headerlink" title="哪来的从错误中学习"></a>哪来的从错误中学习</h2><p>成功才是真正靠得住的教材。<br>失败并不是成功的先决条件。</p><h2 id="计划即瞎想"><a href="#计划即瞎想" class="headerlink" title="计划即瞎想"></a>计划即瞎想</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;卸负篇&quot;&gt;&lt;a href=&quot;#卸负篇&quot; class=&quot;headerlink&quot; title=&quot;卸负篇&quot;&gt;&lt;/a&gt;卸负篇&lt;/h1&gt;&lt;h2 id=&quot;忘了现实世界&quot;&gt;&lt;a href=&quot;#忘了现实世界&quot; class=&quot;headerlink&quot; title=&quot;忘了现实世界&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="管理" scheme="http://yoursite.com/categories/管理/"/>
    
    
    <category term="项目管理" scheme="http://yoursite.com/tags/项目管理/"/>
    
  </entry>
  
  <entry>
    <title>《VIM实用技巧》笔记</title>
    <link href="http://yoursite.com/2016/09/26/%E3%80%8AVIM%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/09/26/%E3%80%8AVIM%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2016-09-26T13:09:22.000Z</published>
    <updated>2016-09-27T08:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-Vim解决问题的方式"><a href="#第1章-Vim解决问题的方式" class="headerlink" title="第1章 Vim解决问题的方式"></a>第1章 Vim解决问题的方式</h1><ul><li>s 命令：先删除光标下的字符，然后进入插入模式。</li><li>f{char} 查找下一处指定字符出现的位置。</li><li>; 命令会重复查找上一次f命令所查找的字符。</li><li>. 命令重复上次的修改。</li><li>u (undo)撤销</li><li>* 命令可以查找当前光标下的单词。</li><li>cw 删除从光标位置到当前词结尾处的文本，并切换到插入模式。</li><li>set hls 高亮</li><li>n 执行过查找命令后，n键可以跳到下一个匹配项</li></ul><a id="more"></a><h2 id="第一部分-模式"><a href="#第一部分-模式" class="headerlink" title="第一部分 模式"></a>第一部分 模式</h2><blockquote><p>反向删除</p></blockquote><ul><li>db 命令删除从光标起始位置到单词开头的内容，保留光标所在字符。</li><li>x 键删除光标所在字符</li></ul><blockquote><p>正向删除</p></blockquote><ul><li>b 命令把光标移到单词的开头</li><li>dw 命令删除整个单词</li></ul><blockquote><p>删除整个单词</p></blockquote><ul><li>daw ‘delete a word’</li><li>yyp 命令，光标在行首，复制此行</li><li>cW 命令，修改第一个单词</li><li>180<c-x> 命令会正向跳到所找到的第一个数字上。</c-x></li></ul><p><strong> 口诀：执行、重复、回退 </strong><br>操作符 + 动作命令 = 操作</p><ul><li>gUap 把整段文字转换为大写</li><li>dd 删除当前行</li><li>>> 缩进当前行</li><li>gU 转换为大写</li><li>c 修改</li><li>d 删除</li><li>y 复制到寄存器</li><li>g~ 反转大小写</li><li>gu 转换为小写</li><li>> 增加缩进</li><li>&lt; 减小缩进</li><li>= 自动缩进</li><li>！ 使用外部程序过滤所跨越的行</li></ul><p>第3章 插入模式</p><ul><li><c-h> 删除前一个字符（同退格键）</c-h></li><li><c-w> 删除前一个单词</c-w></li><li><c-u> 删至行首</c-u></li><li>\<c-[> = \<esc></esc></c-[></li></ul><p>插入-普通模式</p><ul><li>\<c-o> 切换到插入-普通模式</c-o></li><li>zz 命令重绘屏幕</li><li>yt, 拷贝从光标到逗号之间的文本</li><li>\<c-r>0 把刚才复制的文本黏贴到光标所在位置。</c-r></li><li>A 切换到句尾// 含义待定</li><li>\<c-r>= 访问表达寄存器</c-r></li><li>ga 命令查看字符的编码</li><li>\<c-v> 命令后跟一个非数字键，它会插入这个按键本身所代表的字符。</c-v></li><li>\<c-k>{char1}{char2} 插入以二合字母表示的字符</c-k></li><li>R 命令可以由普通模式进入替换模式</li><li>按<c-g> 可以在可视模式及选择模式间切换。</c-g></li><li>v 激活面向字符的可视模式，再按v则回到普通模式</li><li>V 普通模式与面向行的可视模式互相切换</li><li>\<c-v> 普通模式与面向列块的可视模式切换ß</c-v></li><li>gv 重选上次的高亮选区</li><li>o 切换高亮选取的活动端</li></ul><p>:set shiftwidth=4 softtabstop=4 expandtab</p><h2 id="只要可能，最好用操作符命令，而不是可视命令"><a href="#只要可能，最好用操作符命令，而不是可视命令" class="headerlink" title="只要可能，最好用操作符命令，而不是可视命令"></a>只要可能，最好用操作符命令，而不是可视命令</h2><p>. 命令在可视模式下有时会有一些异常的表现<br>vit 选择标签里的内容，标签指的是\<a>之类的标签<br>U 命令把所选中的字符转换为大写</a></p><h2 id="结识Vim的命令行模式"><a href="#结识Vim的命令行模式" class="headerlink" title="结识Vim的命令行模式"></a>结识Vim的命令行模式</h2><p>\: Vim会切换到命令行模式<br>\’&lt;,’&gt; 代表了高亮选区<br>\’&lt;,’&gt;normal 对高亮选区中的每一行执行普通模式下的.命令<br>% 代表整个文件范围</p><h2 id="重复上次的Ex命令"><a href="#重复上次的Ex命令" class="headerlink" title="重复上次的Ex命令"></a>重复上次的Ex命令</h2><p>@: 在运行过一次之后，后面就可以用@@命令来重复它<br>gj与gk 按屏幕行向下及向上移动</p><ul><li>w 正向移动到下一单词的开头</li><li>b 反向移动到当前单词/上一单词的开头</li><li>e 正向移动到当前单词/下一单词的结尾</li><li>ge 反向移动到上一单词的结尾</li></ul><p>f,dt. 查找逗号，并删除逗号之后的文字，并保留句号。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第1章-Vim解决问题的方式&quot;&gt;&lt;a href=&quot;#第1章-Vim解决问题的方式&quot; class=&quot;headerlink&quot; title=&quot;第1章 Vim解决问题的方式&quot;&gt;&lt;/a&gt;第1章 Vim解决问题的方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;s 命令：先删除光标下的字符，然后进入插入模式。&lt;/li&gt;
&lt;li&gt;f{char} 查找下一处指定字符出现的位置。&lt;/li&gt;
&lt;li&gt;; 命令会重复查找上一次f命令所查找的字符。&lt;/li&gt;
&lt;li&gt;. 命令重复上次的修改。&lt;/li&gt;
&lt;li&gt;u (undo)撤销&lt;/li&gt;
&lt;li&gt;* 命令可以查找当前光标下的单词。&lt;/li&gt;
&lt;li&gt;cw 删除从光标位置到当前词结尾处的文本，并切换到插入模式。&lt;/li&gt;
&lt;li&gt;set hls 高亮&lt;/li&gt;
&lt;li&gt;n 执行过查找命令后，n键可以跳到下一个匹配项&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="工具" scheme="http://yoursite.com/categories/工具/"/>
    
    
    <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>廖雪峰JavaScript教程笔记</title>
    <link href="http://yoursite.com/2016/07/09/%E5%BB%96%E9%9B%AA%E5%B3%B0JavaScriptt%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/09/%E5%BB%96%E9%9B%AA%E5%B3%B0JavaScriptt%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-08T16:00:00.000Z</published>
    <updated>2016-07-19T14:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><ul><li>“==”会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</li><li>“===”不会自动转换数据类型。</li><li>NaN与所有其他值都不相等，包括它自己：NaN===NaN;  //false</li><li>唯一能判断NaN的方法是通过isNaN()函数。</li></ul><p>‘use strict’</p><blockquote><p>在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致错误。</p></blockquote><a id="more"></a><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>\n表示换行<br>ES6 新增多行字符串表示法，用`…`表示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">`这是一个  </span></div><div class="line">多行  </div><div class="line">字符串`</div></pre></td></tr></table></figure></p><h3 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h3><ul><li>length 获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始</li><li>toUpperCase 把一个字符串全部变为大写</li><li>toLowerCase 把一个字符串全部变为小写</li><li>indexOf 搜索制定字符串出现的位置</li><li>substring 返回指定索引区间的字串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'hello,world!'</span></div><div class="line">s.substring(<span class="number">0</span>,<span class="number">5</span>); <span class="comment">//从索引0开始到5（不包括5），返回"hello".</span></div></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><ul><li>length</li><li>indexOf</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">'30'</span>,<span class="string">'xyz'</span>];</div><div class="line">arr.index(<span class="number">20</span>);<span class="comment">//元素20的索引为1</span></div></pre></td></tr></table></figure><ul><li>slice 类似字符串的<code>substring()</code>，截取数组的部分元素，返回新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</div><div class="line">arr.slice(<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//从索引0开始，到索引3结束，但不包括索引3：['a','b','c']</span></div></pre></td></tr></table></figure><ul><li>push和pop push()向数组的末尾添加若干元素，pop()则把数组的最后一个元素删除。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">arr.push(<span class="string">'a'</span>,<span class="string">'b'</span>);</div><div class="line">arr;<span class="comment">//[1,2,'a','b']</span></div></pre></td></tr></table></figure><ul><li>unshift和shift unshift()向数组头部添加若干元素，shift()则把数组第一个元素删除。</li><li>sort 对数组进行排序</li><li>reverse 把数组元素掉个，反转</li><li>splice 可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</div><div class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="string">'google'</span>,<span class="string">'twitter'</span>);</div><div class="line">arr;<span class="comment">//['a','b','google','twitter']</span></div></pre></td></tr></table></figure><ul><li>concat 把当前的数组和另一个数组连接起来</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> added=arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line">added;<span class="comment">//['a','b','c',1,2,3]</span></div></pre></td></tr></table></figure><ul><li>join 把当前数组的每一个元素都用指定的字符串连接起来，然后返回连接后的字符串.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">arr.join(<span class="string">'-'</span>);<span class="comment">//['a-b-c-1-2-3']</span></div></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>对象访问方法:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">object.property;</div><div class="line">object[<span class="string">'property'</span>];</div></pre></td></tr></table></figure><ul><li>删除对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span>.object.property;</div></pre></td></tr></table></figure><ul><li>检查object是否有用某一属性，可以用in操作符<br><strong>不过要小心，如果in判断一个属性存在，这个属性不一定是object的，它可能是继承得到的</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming;<span class="comment">//true</span></div></pre></td></tr></table></figure><ul><li>要判断一个属性是否是对象自身拥有的，而不是继承的，可以用hasOwnPorperty();</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoming.hasOwnPorperty(<span class="string">'toString'</span>);<span class="comment">//false</span></div></pre></td></tr></table></figure><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>条件判断的顺序非常重要</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>*for…in 可以把一个对象的所有属性一次循环出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o=&#123;</div><div class="line">    name:<span class="string">"Jack"</span>,</div><div class="line">    age:<span class="number">20</span>,</div><div class="line">    city:<span class="string">'Beijing'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o)&#123;</div><div class="line">alert (key);<span class="comment">//'name','age','city'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>要过滤掉对象继承的属性，用hasOwnProperty()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o)&#123;</div><div class="line">    <span class="keyword">if</span>(o.hasOwnProperty(key))&#123;</div><div class="line">        alert(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于Array也是对象，它的每个元素的索引被视为对象的属性，因此for…in可以直接循环出Array的索引：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</div><div class="line">    alert(i);<span class="comment">//'0','1','2' 注意得到的是字符串，不是数字</span></div><div class="line">    alert(a[i]);<span class="comment">//'a','b','c'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>while</li><li>do…while</li></ul><h1 id="Map和Set（ES6"><a href="#Map和Set（ES6" class="headerlink" title="Map和Set（ES6)"></a>Map和Set（ES6)</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map是一组键值对的结构，具有极快的查询速度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m= <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>,<span class="number">95</span>],[<span class="string">'Bob'</span>,<span class="number">75</span>],[<span class="string">'Tracy'</span>,<span class="number">85</span>]]);</div><div class="line">m.get(<span class="string">'Michael'</span>);<span class="comment">//95</span></div></pre></td></tr></table></figure><p>Map具有以下方法：</p><ul><li>set();添加</li><li>has();是否存在</li><li>get();获取</li><li>delete();删除</li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set和Map类似，也是一组key的集合，但不储存value。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1=<span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="keyword">var</span> s2=nwe <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">'3'</span>]);</div><div class="line">s2;<span class="comment">//1,2,3,'3' key不能重复，重复的会被自动过滤</span></div></pre></td></tr></table></figure><p>Set的方法：</p><ul><li>add(key);添加</li><li>delete(key);删除</li></ul><h2 id="iterable-ES6"><a href="#iterable-ES6" class="headerlink" title="iterable(ES6)"></a>iterable(ES6)</h2><p>Array,Map和Set都属于iterable类型，这类集合可以通过新的for…of循环来遍历。</p><ul><li>for…in遍历的是属性名称，当给一个Array手动添加一个额外的属性后，它会遍历出属性名称，而不是索引号。</li><li>for…of只循环集合本身的元素。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">a.name=<span class="string">'hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</div><div class="line">    alert(i);<span class="comment">//'a','b','c'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>更好的方法是使用iterable内置的forEach()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</div><div class="line"><span class="comment">//element:指向当前元素的值value</span></div><div class="line"><span class="comment">//index：指向当前元素的索引key</span></div><div class="line"><span class="comment">//array:指向Array对象本身，同理指向Map和Set本身</span></div><div class="line">alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><blockquote><p>只在<i><code>函数内部</code></i>起作用，并且永远指向当前函数的调用者传入的所有参数。类似Array，但不是一个Array。<br>arguments最常用于判断传入参数的个数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b.c</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length====<span class="number">2</span>)&#123;</div><div class="line">        <span class="comment">//实际拿到的参数是a和b</span></div><div class="line">        c=b; <span class="comment">//把b值赋值给c</span></div><div class="line">        b=<span class="literal">null</span>;<span class="comment">//b变为默认值，变成了可选参数</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="rest参数-ES6"><a href="#rest参数-ES6" class="headerlink" title="rest参数(ES6)"></a>rest参数(ES6)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...rest</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span>+a);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span>+b);</div><div class="line">    <span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">a=<span class="number">1</span></div><div class="line">b=<span class="number">2</span> <span class="comment">//若只有一位，b=undefined</span></div><div class="line"><span class="built_in">Array</span>[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment">//若无多余参数，则为空数组，非undefined</span></div></pre></td></tr></table></figure><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>内部和外部函数变量名重名,则内部函数的变量将“屏蔽”外部函数的变量。</li><li>变量提升。函数会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。<br><i><code>应严格遵守“在函数内部首先申明所有变量”这一规则</code></i></li><li>全局作用域，全局对象window</li><li>名字空间：减少相同的全局变量和顶层函数命名冲突，可以把所有的变量和函数绑定到一个全局变量中。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MYAPP=&#123;&#125;;</div><div class="line">MYAPP.name=<span class="string">'myapp'</span>;</div><div class="line">MYapp.version=<span class="number">1.0</span>;</div><div class="line">MYAPP.foo=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>局部作用域。在<i><code>for</code></i>循环等语句块中是无法定义具有局部作用域的变量的。就是for中定义的变量，父函数可以访问。ES6引入的<i><code>let</code></i>关键字，可以申明一个块级作用域的变量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</div><div class="line">        sum +=i;</div><div class="line">    &#125;</div><div class="line">    i +=<span class="number">1</span>;<span class="comment">//出错，i不可访问</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>常量。<i><code>const</code></i>与<i><code>let</code></i>都具有块级作用域</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><blockquote><p>单独调用函数，比如getAge(),该函数的this指向全局对象window,要保证this指向正确，必须用object.<em>*</em>()的形式调用！单独调用getAge()//NaN</p></blockquote><p>在严格模式下，函数的this指向undefined。<br>修复办法:<br>用that捕获this。</p><ul><li>apply:根据是否是严格模式，this指向undefined或window，可通过apply控制this指向。apply()第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getAge.apply(xiaoming,[]);</div></pre></td></tr></table></figure><ul><li>call与apply唯一的区别就是call把参数按顺序传入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>);<span class="comment">//5</span></div></pre></td></tr></table></figure><p>对普通函数调用，通常把<i><code>this</code></i>绑定为<i><code>null。</code><i></i></i></p><ul><li>装饰器。利用apply动态改变函数行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>,<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><blockquote><p>一个函数接收另外一个函数作为参数，这种函数称为高阶函数。</p></blockquote><ul><li>map()方法定义在JavaScript的Array中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</div><div class="line">arr.map(<span class="built_in">String</span>);<span class="comment">//</span></div></pre></td></tr></table></figure><ul><li>Array的reduce()把结果继续和序列的下一个元素做累计计算</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x+y;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//25</span></div></pre></td></tr></table></figure><ul><li>filter()用于把Array的某些元素过滤掉，然后返回剩下的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">''</span>,<span class="literal">null</span>,<span class="literal">undefined</span>,<span class="string">'c'</span>,<span class="string">''</span>];</div><div class="line"><span class="keyword">var</span> r = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> s &amp;&amp; s.trim();</div><div class="line">&#125;);</div><div class="line">r;<span class="comment">//['a','b','c']</span></div><div class="line"><span class="comment">//在JS中除了false、0、''、null、undefined都算true</span></div></pre></td></tr></table></figure><ul><li>Array的sort()方法，默认把所有元素先转换为String再排序，结果‘10’排在了‘2’的前面。</li></ul><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>当一个函数返回一个函数后，其内部的局部变量被新函数引用。</p></blockquote><p>返回必报时牢记一点：<br><i><code>返回函数不要引用任何循环变量，或者后续会发生变化的变量。</code></i><br>要避免这种情况，方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定的函数参数的值不变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr=[];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</div><div class="line">        arr.push((<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> n*n;</div><div class="line">            &#125;</div><div class="line">        &#125;)(i));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> resules=count();</div><div class="line"><span class="keyword">var</span> f1=results[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> f2=results[<span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> f3=results[<span class="number">2</span>];</div><div class="line">f1();<span class="comment">//1</span></div><div class="line">f2();<span class="comment">//4</span></div><div class="line">f3();<span class="comment">//9</span></div></pre></td></tr></table></figure></p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">箭头前面的表示参数，后面的表示表达式</div><div class="line">```（x,y）=&gt;x*x</div></pre></td></tr></table></figure><h1 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h1><p>用<i><code>typeof</code></i>获取对象的类型，它总是返回一个<i><code>字符串</code></i>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;<span class="comment">//'object'</span></div></pre></td></tr></table></figure></p><p>规则：</p><ul><li>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法</li><li>typeof操作符可以判断出number boolean string function undefined</li><li>判断Array要使用Array.isArray(arr);</li><li>判断null使用myVar === null;</li><li>判断某个全局变量是否存在使用typeof window.myVar ===’undefined’;</li><li>函数内部判断某个变量是否存在用typeof myVar===’underfined’;</li></ul><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>new Date()的方法</p><ul><li>getFullYear()</li><li>getMonth()</li><li>getDate()</li><li>getDay()//1，表示星期一</li><li>getHours()//19，表示晚上7点</li><li>getMinutes(0)</li><li>getSeconds(0)</li><li>getMilliseconds()</li><li>getTime()//以number形式表示的时间戳</li></ul><p>解析一个符号ISO 8601格式的字符串使用parse()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d= <span class="built_in">Date</span>.parse(<span class="string">'2015-06-24T19:49:22 875+08:00'</span>);<span class="comment">//注意：不是new Date().parse().</span></div><div class="line">d:<span class="comment">//1435146562875（时间戳）</span></div></pre></td></tr></table></figure></p><ul><li>toLocalString()显示本地时间</li><li>toUTCString()显示UTC时间，比北京时间晚8小时</li></ul><h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><p>创建正则表达式：</p><ul><li>直接通过/正则表达式/写出来：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">re1=/abc\-001/;</div></pre></td></tr></table></figure><ul><li>通过new RegExp(‘正则表达式‘）创建一个RegExp对象：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rel2 = new RegExp(&apos;/abc\\-001&apos;);</div></pre></td></tr></table></figure><p>RegExp对象的<i><code>test()</code></i>方法用于测试给定的<i><code>字符串</code></i>是否符合条件</p><h3 id="切分字符串"><a href="#切分字符串" class="headerlink" title="切分字符串"></a>切分字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'a,b;; c d'</span>.split(<span class="regexp">/[\s\,\;]+/</span>);</div><div class="line"><span class="comment">//['a','b','c','d']</span></div></pre></td></tr></table></figure><p><i><code>切记与Array的splice区分开</code></i></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re=<span class="regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;</div><div class="line">re.exec(<span class="string">'010-12345'</span>);<span class="comment">//['010-12345','010','12345']</span></div></pre></td></tr></table></figure><p>exec()在匹配成功后，返回一个Array，匹配失败时返回null。</p><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>正则表达式默认是贪婪匹配，就是尽可能多的匹配，要采用非贪婪匹配，加上<i><code>？</code></i>即可。</p><h3 id="全局搜索"><a href="#全局搜索" class="headerlink" title="全局搜索"></a>全局搜索</h3><p>全局匹配用<i><code>g</code></i>标志，<i><code>i</code></i>标志表示忽略大小写，<i><code>m</code></i>表示执行多行匹配。</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><i><code>JSON规定字符串必须是UTF-8，字符串必须是双引号，Object的键也必须用双引号。</code></i></p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>使用JSON.stringify(object,范围(null或属性和方法名称），’ ‘（按缩进输出））；</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>JSON.parse(JSON格式的字符串，（可选参数，可以传入函数）);</p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p>JavaScript不区分类和实例的概念，而是通过原型（prototype)来实现面向对象编程。<br>所有对象都是实例，所谓继承关系，不过是把一个对象的原型链指向另一个对象而已。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xiaoming.__proto__=Bird;<span class="comment">//低版本的IE不支持__proto__，仅供演示</span></div></pre></td></tr></table></figure></p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="comment">//其原型链是</span></div><div class="line">arr ----&gt; <span class="built_in">Array</span>.prototype ----&gt; object.prototype ----&gt;<span class="literal">null</span></div></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>用new Student()创建的<i><code>对象</code></i>还从原型prototype上获得了一个constructor属性，它指向函数Student本身：<br>instanceof 用于判断一个变量是否是某个对象的实例<br>getPrototypeOf();用来获取对象的原型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用creatStudent()函数封装所有的new操作。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name=props.name||<span class="string">'匿名'</span>;</div><div class="line">    <span class="keyword">this</span>.grade=props.grade||<span class="string">'匿名'</span>;</div><div class="line">&#125;</div><div class="line">Student.prototype.hello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello, '</span>+ <span class="keyword">this</span>.name+<span class="string">'!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatStudent</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(props||&#123;&#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = creatStudent(&#123;</div><div class="line">    name:<span class="string">'小明'</span>;</div><div class="line">&#125;);</div><div class="line">xiaoming.grade;<span class="comment">//1</span></div></pre></td></tr></table></figure></p><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>用inherits()函数实现原型链继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child,Parent</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    F.prototype = Parent.prototype;</div><div class="line">    Child.prototype = <span class="keyword">new</span> F();</div><div class="line">    Child.prototype.constructor = Child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>小结：</p><ul><li>定义新的构造函数，并在内部用call()调用希望继承的构造函数，并绑定this;</li><li>借助中间函数F实现原型链继承，可通过封装的inherits函数完成；</li><li>继续在新的构造函数的原型上定义新方法。</li></ul><h2 id="class继承（ES6"><a href="#class继承（ES6" class="headerlink" title="class继承（ES6)"></a>class继承（ES6)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name)&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">    &#125;</div><div class="line">    hello()&#123;<span class="comment">//注意没有使用function</span></div><div class="line">        alert(<span class="string">'Hello, '</span>+ <span class="keyword">this</span>.name+<span class="string">'!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过&lt;i&gt;`extends`&lt;/i&gt;来实现继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PridentStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name,grade)&#123;</div><div class="line">        <span class="keyword">super</span>(name);<span class="comment">//使用super调用父类的构造方法！</span></div><div class="line">        <span class="keyword">this</span>.grade = grade;</div><div class="line">    &#125;</div><div class="line">    myGrade()&#123;</div><div class="line">        alert(<span class="string">'I am at grade'</span>+<span class="keyword">this</span>.grade);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h2><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><ul><li>navigator.appName:浏览器名称</li><li>navigator.appVersion:浏览器版本</li><li>navigator.language:浏览器设置的语言</li><li>navigator.platform:操作系统类型</li><li>navigator.userAgent:浏览器设定的User-Agent字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//navigator的信息很容易被修改，所以用短路运算符</span></div><div class="line"><span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth||<span class="built_in">document</span>.body.clientWidth;</div></pre></td></tr></table></figure></li></ul><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><ul><li>screen.width:屏幕宽度</li><li>screen.height:屏幕高度</li><li>screen.colorDepth：返回颜色位数</li></ul><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location对象表示页面的URL信息</p><ul><li>location.protocol:’http’</li><li>location.host:’www.example.com’</li><li>location.port:’8080’</li><li>location.pathname:’/path/index.html’</li><li>location.search:’?a=1&amp;b=2’</li><li>location.hash:’TOP’</li><li>location.assign()//加载一个新页面</li><li>location.reload()//重新加载</li></ul><h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>注意getElementsByClassName和getElementsByTagName,<i><code>Elements</code></i>为复数，后面加索引号。</p><h3 id="更新DOM"><a href="#更新DOM" class="headerlink" title="更新DOM"></a>更新DOM</h3><p>innerText或textContent（IE<9不支持)可以自动对字符串进行html编码 使用style修改css时一定要加<i=""><code>引号</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">js.style.fontWeight=<span class="string">'bold'</span>;</div></pre></td></tr></table></figure></9不支持)可以自动对字符串进行html编码></p><h3 id="插入DOM"><a href="#插入DOM" class="headerlink" title="插入DOM"></a>插入DOM</h3><p>parentElement.insertBefore(newElement,referenceElement);</p><h3 id="删除DOM"><a href="#删除DOM" class="headerlink" title="删除DOM"></a>删除DOM</h3><p>removeChild();<br>children是子元素，非值，要想获得值，必须.children.innerText;</p><h2 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h2><p>要获得input、text、password、hidden、select的值，直接使用.value即可。<br>单选框和复选框用checked判断。<br>HTML5新增控件date、datetime、datetime-local、color</p><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;form id='test' onsubmit='return checkForm()'&gt;</div><div class="line">    &lt;button type='submit'&gt;Submit&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;script&gt;</div><div class="line">function checkForm()&#123;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>使用toMD5修改口令时，口令框的显示会从几个<em>变为32个</em>(因为MD5有32个字符）。<br>要想不改变用户的输入，可以利用<input type="hidden"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'password'</span> <span class="attr">id</span>=<span class="string">'input_password'</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">id</span>=<span class="string">'md5_password'</span> <span class="attr">name</span>=<span class="string">'password'</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> input_pwd=<span class="built_in">document</span>.getElementById(<span class="string">'input_password'</span>);</div><div class="line">    <span class="keyword">var</span> md5_pwd=<span class="built_in">document</span>.getElementById(<span class="string">'md5_password'</span>);</div><div class="line">    md5_pwd.value=toMD5(input_pwd.value);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>没有name属性的input数据不会被提交</code></p><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><p>当一个表单包含<i><code>&lt;input type=&#39;file&#39;&gt;</code></i>时，表单的enctype必须指定为multipart/form-data,method必须指定为post，浏览器才能正确编码并以multipart/form-data格式发送表单数据。</p><h3 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h3><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var request;</div><div class="line">if(window.XMLHttpRequest)&#123;</div><div class="line">    request = new XMLHttpRequest;</div><div class="line">&#125;else&#123;</div><div class="line">    request = new ActiveXOBject('Microsoft.XMLHTTP);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过检测window对象是否拥有XMLHttpRequest属性确定浏览器是否支持，而不要根据navigator.userAgent来检测。</p><h4 id="安全限制"><a href="#安全限制" class="headerlink" title="安全限制"></a>安全限制</h4><p>请求外域的URL方式：</p><h5 id="JSONP，只能用GET请求，并且要求返回JavaScript。"><a href="#JSONP，只能用GET请求，并且要求返回JavaScript。" class="headerlink" title="JSONP，只能用GET请求，并且要求返回JavaScript。"></a>JSONP，只能用GET请求，并且要求返回JavaScript。</h5><h5 id="CORS（前提是浏览器支持HTML5）"><a href="#CORS（前提是浏览器支持HTML5）" class="headerlink" title="CORS（前提是浏览器支持HTML5）"></a>CORS（前提是浏览器支持HTML5）</h5><p>首先检测Access-Control-Allow-Origin是否包含本域，如果是，则跨域请求成功，如果不是则失败。</p><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>在使用canvas前，用canvas.getContext来检查浏览器是否支持。<br>优化方案：</p><ul><li>通过创建一个不可见的Canvas来绘图，然后将最终结果复制到页面的可见Canvas中；</li><li>尽量使用整数坐标而不是浮点数；</li><li>可以创建多个重叠的Canvas绘制不同的层，而不是在一个Canvas中绘制非常复杂的图；</li><li>背景图片如果不变可以直接用<code>&lt;img&gt;</code>标签并放到最底层。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;数据类型和变量&quot;&gt;&lt;a href=&quot;#数据类型和变量&quot; class=&quot;headerlink&quot; title=&quot;数据类型和变量&quot;&gt;&lt;/a&gt;数据类型和变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;“==”会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。&lt;/li&gt;
&lt;li&gt;“===”不会自动转换数据类型。&lt;/li&gt;
&lt;li&gt;NaN与所有其他值都不相等，包括它自己：NaN===NaN;  //false&lt;/li&gt;
&lt;li&gt;唯一能判断NaN的方法是通过isNaN()函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‘use strict’&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致错误。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>廖雪峰jQuery教程笔记</title>
    <link href="http://yoursite.com/2016/07/07/%E5%BB%96%E9%9B%AA%E5%B3%B0jQuery%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/07/%E5%BB%96%E9%9B%AA%E5%B3%B0jQuery%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-07T13:32:08.000Z</published>
    <updated>2016-07-19T15:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>利用jQuery查找返回的是<i><code>jQuery对象</code></i>，<i><code>jQuery对象</code></i>类似于数组，它的每一个元素都是一个引用了DOM节点的对象。返回的<code>jQuery对象</code>如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'abc'</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>]</div><div class="line"><span class="comment">//若不存在则返回[]</span></div><div class="line"><span class="comment">//不会返回defined或null</span></div></pre></td></tr></table></figure></p><p>查找同时包含多个class节点的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = $(<span class="string">'.red.green'</span>);<span class="comment">//注意：没有空格！</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>当属性的值包含空格等特殊字符时，需要用双引号括起来。</p><h2 id="查找和过滤"><a href="#查找和过滤" class="headerlink" title="查找和过滤"></a>查找和过滤</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li>find() <em>在某个节点的子节点中查找</em></li><li>parent() <em>从当前节点向上查找</em></li><li>next()</li><li>prew()</li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><ul><li>filter() <em>可传入函数，要特别注意，函数内部的this被绑定为DOM对象，不是jQuery对象。</em></li><li>map()<em>把一个jQuery对象包涵的若干DOM节点转化为其他对象</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> langs = $(<span class="string">'ul.lang li'</span>);</div><div class="line"><span class="keyword">var</span> arr = langs.map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.innerHTML;</div><div class="line">&#125;).get();<span class="comment">//用get()拿到包含string的Array</span></div></pre></td></tr></table></figure><ul><li>first()</li><li>last()</li><li>slice()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.type !== <span class="string">"radio"</span> || <span class="keyword">this</span>.checked)等价于</div><div class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.type!==<span class="string">'radio'</span>||<span class="keyword">this</span>.type===<span class="string">'radio'</span>&amp;&amp;<span class="keyword">this</span>.checked)</div></pre></td></tr></table></figure><h1 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h1><h2 id="修改Text和HTML"><a href="#修改Text和HTML" class="headerlink" title="修改Text和HTML"></a>修改Text和HTML</h2><p>注意：jQuery对象的所有方法都返回一个jQuery对象（可能时新的，也可能是自身），这样我们可以进行链式调用，非常方便。</p><ul><li>css();<em>获取设置元素css</em></li><li>hasClass();</li><li>addClass();</li><li>removeClass();</li><li>show();<em>修改display属性</em></li><li>hide();</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//*浏览器可视窗口大小*</span></div><div class="line">$(<span class="built_in">window</span>).width();</div><div class="line">$(<span class="built_in">window</span>).height();</div><div class="line"><span class="comment">//*同理文档大小，window改为document即可。*</span></div><div class="line"><span class="comment">//*某个div的大小*</span></div><div class="line">div.width();</div></pre></td></tr></table></figure><ul><li>attr()</li><li>removeAttr()</li><li>prop()</li></ul><p>attr()和prop()对于属性checked处理有所不同。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">radio.attr(<span class="string">'checked'</span>);<span class="comment">//'checked'</span></div><div class="line">radio.prop(<span class="string">'checked'</span>);<span class="comment">//true</span></div><div class="line">radio.is(:checked);<span class="comment">//true</span></div></pre></td></tr></table></figure></p><p><code>is()</code>最佳</p><h2 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h2><p>val()获取和设置对应的value属性。</p><h2 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h2><ul><li>append()</li><li>prepend()</li><li>after()</li><li>before()</li><li>remove()<em>删除节点</em></li></ul><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><code>on</code>方法用来绑定一个事件，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">'hello!'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//等价于</span></div><div class="line">a.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="string">'hello!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><ul><li>click:鼠标单击时触发</li><li>dbclick:鼠标双击时触发</li><li>mouseenter:鼠标进入时触发</li><li>mouseleave:鼠标离开触发</li><li>mousemove:鼠标做DOM内部移动时触发</li><li>hover:鼠标进入和退出时触发两个函数，相当于mouseenter 和mouseleave</li></ul><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>键盘事件仅作用在当前焦点的DOM上，通常是<code>&lt;input&gt;</code>和<code>&lt;textaera&gt;</code></p><ul><li>keydown:键盘按下时触发</li><li>keyup：键盘松开时触发</li><li>keypress：按一次键后触发</li></ul><h2 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h2><ul><li>focus:当DOM获得焦点时触发</li><li>blur:当DOM失去焦点时触发</li><li>change:当<code>&lt;input&gt;&lt;select&gt;</code>或<code>&lt;textarea&gt;</code>的内容改编时触发</li><li>submit:当<code>&lt;form&gt;</code>提交时触发</li><li>ready:当页面被载入并且DOM树完成初始化后触发，仅作用于<code>document</code></li></ul><p><strong>注意：初始化的代码必须放到document对象的ready事件中，保证DOM已完成初始化</strong></p><h2 id="事件参数"><a href="#事件参数" class="headerlink" title="事件参数"></a>事件参数</h2><p>有些事件会传入Event对象作为参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#test'</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        $(<span class="string">'testSpan'</span>).text(<span class="string">'pageX = '</span>+e.pageX+<span class="string">',pageY='</span>+e.pageY);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><h2 id="取消绑定"><a href="#取消绑定" class="headerlink" title="取消绑定"></a>取消绑定</h2><p>off(‘click’,function);</p><h2 id="事件触发条件"><a href="#事件触发条件" class="headerlink" title="事件触发条件"></a>事件触发条件</h2><p>事件的触发总是由用户操作引起的，当用户在文本框中输入时，就会触发change事件，但如果用JS代码去改动，不回触发，若希望触发，可直接调用input.change()==input.trigger(‘change’)</p><h2 id="浏览器安全限制"><a href="#浏览器安全限制" class="headerlink" title="浏览器安全限制"></a>浏览器安全限制</h2><p>有些JS代码只有在用户触发下才能执行，例如，<code>window.open()</code><br>用户可通过单击直接触发，延迟调用则会被浏览器拦截</p><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><ul><li>show()</li><li>hide()</li><li>toggle()</li><li>slideUp()</li><li>slideDown()</li><li>slideToggle()</li><li>fadeIn()</li><li>fadeOut()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div.fadeOut(<span class="string">'slow'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).remove();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>fadeToggle()</li><li>animate()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div.animate(&#123;</div><div class="line">    opacity:<span class="number">0.25</span>;</div><div class="line">    width:<span class="string">'256px'</span>;</div><div class="line">    height:<span class="string">'256px'</span>;</div><div class="line">&#125;,<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">    $(<span class="keyword">this</span>).css(<span class="string">'opacity'</span>,<span class="string">'1.0'</span>).css(<span class="string">'width'</span>,<span class="regexp">/128px').css('height','128px');&#125;);</span></div></pre></td></tr></table></figure><ul><li>delay()//暂停</li></ul><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>ajax(url,settings)需要接收一个url和一个可选的settings对象，常用的选项如下：</p><ul><li>async: 是否异步执行AJAX请求，默认为true,千万不要指定为false</li><li>method：发送的method，缺省为GET，可指定为POST、PUT等</li><li>contentType: 发送POST请求的格式，默认值为application/x-www-form-urlencoded;charset=UTF-8,也可以指定为text/plain,application/json</li><li>data: 发送的数据，可以是字符串，数组或object。如果GET请求，data将被转换为query附加到URL上，如果是POST请求，根据contentType把data序列号成合适的格式</li><li>headers：发送的额外的HTTP头，必须是一个object</li><li>dataType: 接收的数据格式，可以指定为html.xml,json,text等，缺省情况下，根据Content-Type猜测。</li><li>get()</li><li>post()</li><li>getJSON()</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>$.fn</li><li>$.extend(target,obj1,obj2,…) 越往后优先级别越高</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.fn.highlight = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> opts=$.extend(&#123;&#125;,$.fn.highlight.defaults,options);</div><div class="line"><span class="keyword">this</span>.css(<span class="string">'backgroundColor'</span>,opts.backgroundColor).css(<span class="string">'color'</span>,opts.color);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">$.fn.highlight.default=&#123;</div><div class="line">    color:<span class="string">'#d85030'</span>,</div><div class="line">    backgroundColor:<span class="string">'#fff8de'</span></div><div class="line">&#125;</div><div class="line">$.fn.highlight.default.color=<span class="string">'#fff'</span>;</div><div class="line">$.fn.highlight.backgroundColor:<span class="string">'#000'</span>;</div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h1&gt;&lt;p&gt;利用jQuery查找返回的是&lt;i&gt;&lt;code&gt;jQuery对象&lt;/code&gt;&lt;/i&gt;，&lt;i&gt;&lt;code&gt;jQuery对象&lt;/code&gt;&lt;/i&gt;类似于数组，它的每一个元素都是一个引用了DOM节点的对象。返回的&lt;code&gt;jQuery对象&lt;/code&gt;如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//若不存在则返回[]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//不会返回defined或null&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查找同时包含多个class节点的元素&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = $(&lt;span class=&quot;string&quot;&gt;&#39;.red.green&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//注意：没有空格！&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap学习笔记</title>
    <link href="http://yoursite.com/2016/07/04/Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/04/Bootstrap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-04T11:17:56.000Z</published>
    <updated>2016-07-13T13:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>可以使用<code>&lt;h1&gt;...&lt;h6&gt;</code>,也可以使用类名h1~h6</li><li>使用<code>&lt;small&gt;</code>制作副标题</li></ul><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>默认字号:14p，line-height:1,42857143，颜色为深灰色，字体为sans-serif(可根据需要进行修改)<br><a id="more"></a></p><h2 id="强调内容"><a href="#强调内容" class="headerlink" title="强调内容"></a>强调内容</h2><ul><li>添加类名<code>lead</code></li><li><code>&lt;small&gt;</code></li><li><code>&lt;strong&gt;</code></li><li><code>&lt;em&gt;</code></li><li><code>&lt;cite&gt;</code></li></ul><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><ul><li><code>&lt;b&gt;</code></li><li><code>&lt;strong&gt;</code></li></ul><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><ul><li><code>&lt;em&gt;</code></li><li><code>&lt;i&gt;</code></li></ul><h2 id="强调相关的类"><a href="#强调相关的类" class="headerlink" title="强调相关的类"></a>强调相关的类</h2><ul><li>.text-muted:提示，使用浅灰色（＃999）</li><li>.text-primary:主要，使用蓝色（＃428bca）</li><li>.text－success：成功，使用浅绿色（＃3c763d）</li><li>.text－info：通知信息，使用浅蓝色（＃31708f）</li><li>.text－warning：警告，使用黄色（＃8a6d3b）</li><li>.text－danger：危险，使用褐色（＃a94442）</li></ul><h2 id="文本对齐风格"><a href="#文本对齐风格" class="headerlink" title="文本对齐风格"></a>文本对齐风格</h2><ul><li>.text-left:左对齐</li><li>.text-center:居中对齐</li><li>.text-right:右对齐</li><li>.text-justify:两端对齐（各浏览器解析不一致，慎用）</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><code>.list-unstyled</code> 去点列表</li><li><code>.list-inline</code> 内联列表,把垂直列表变为水平列表，去掉项目编号</li><li><code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code> 定义列表</li><li><code>.dl-horizontal</code> 水平定义列表 </li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><code>&lt;code&gt;</code>单行内联代码</li><li><code>&lt;kbd&gt;</code>用户输入代码</li><li><code>&lt;pre&gt;</code>多行块代码</li><li>为<code>&lt;pre&gt;</code>元素添加<code>.pre-scrollable</code>类，可以控制代码块区域最大高度为340px。</li></ul><p><strong>注意：不管是用哪种代码风格，代码中遇到小于号用’&amp;lt’代替，大于号用’&amp;gt’代替</strong></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="表格类型"><a href="#表格类型" class="headerlink" title="表格类型"></a>表格类型</h2><p><table></table></p><ul><li><code>.table</code> 基础表格</li><li><code>.table-striped</code> 斑马线表格</li><li><code>.table-bordered</code> 带边框的表格</li><li><code>.table-hover</code> 鼠标悬停高亮的表格</li><li><code>.table-condensed</code> 紧凑型表格</li><li><code>.table-responsive</code> 响应型表格</li></ul><h2 id="表格行的类"><a href="#表格行的类" class="headerlink" title="表格行的类"></a>表格行的类</h2><p><code>&lt;tr&gt;</code></p><ul><li><code>.active</code> 表示当前活动的信息</li><li><code>.success</code> 表示成功或正确的行为</li><li><code>.info</code> 表示中立的信息或行为</li><li><code>.warning</code> 表示警告，需要特别注意</li><li><code>.danger</code> 表示危险或可能是错误的行为</li></ul><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p><code>&lt;input&gt;&lt;select&gt;&lt;textarea&gt;</code></p><ul><li><code>.gorm-group</code> 内联表单</li><li><code>&lt;lable&gt;</code>标签里加<code>.sr-only</code><em>标签将隐藏</em></li></ul><p><code>&lt;form&gt;</code></p><ul><li><code>.form-horizontal</code> 水平表单（标签居左，表单控件居右）</li><li><code>.form-inline</code> 内联表单</li></ul><h2 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><ul><li><code>.form-control</code> 定制效果</li></ul><h3 id="下拉选项框select"><a href="#下拉选项框select" class="headerlink" title="下拉选项框select"></a>下拉选项框select</h3><ul><li><code>multiple</code> 统一样式风格</li></ul><h3 id="文本域textarea"><a href="#文本域textarea" class="headerlink" title="文本域textarea"></a>文本域textarea</h3><ul><li><code>.form-control</code> 无需设置cols属性</li></ul><h3 id="复选框checkbox和单选radio"><a href="#复选框checkbox和单选radio" class="headerlink" title="复选框checkbox和单选radio"></a>复选框checkbox和单选radio</h3><ul><li><code>.checkbox</code> </li><li><code>.radio</code> </li></ul><h3 id="复选框和单选按钮水平排列"><a href="#复选框和单选按钮水平排列" class="headerlink" title="复选框和单选按钮水平排列"></a>复选框和单选按钮水平排列</h3><p><code>label</code>分别添加</p><ul><li><code>.checkbox-inline</code></li><li><code>.radio-inline</code></li></ul><h3 id="按钮类型"><a href="#按钮类型" class="headerlink" title="按钮类型"></a>按钮类型</h3><p><code>&lt;button&gt;</code></p><ul><li>input[type=’submit’]</li><li>input[type=’button’]</li><li>input[type=’reset’]</li></ul><h3 id="表单控件大小"><a href="#表单控件大小" class="headerlink" title="表单控件大小"></a>表单控件大小</h3><p><code>&lt;input&gt;&lt;textarea&gt;&lt;select&gt;</code></p><ul><li><code>.input-sm</code> 让控件比正常大小更小</li><li><code>.input-lg</code> 让控件比正常大小更大</li></ul><h3 id="表单控件状态（焦点状态）"><a href="#表单控件状态（焦点状态）" class="headerlink" title="表单控件状态（焦点状态）"></a>表单控件状态（焦点状态）</h3><ul><li><code>.form-control</code> //焦点状态是通过伪类:focus 实现的。</li></ul><h3 id="表单控件状态（禁用状态）"><a href="#表单控件状态（禁用状态）" class="headerlink" title="表单控件状态（禁用状态）"></a>表单控件状态（禁用状态）</h3><ul><li>disabled  不过如果fieldset设置了disabled，但legend中如果有输入框的话，这个输入框无法被禁用。</li></ul><h3 id="表单控件状态（验证状态）"><a href="#表单控件状态（验证状态）" class="headerlink" title="表单控件状态（验证状态）"></a>表单控件状态（验证状态）</h3><ul><li><code>.has-warning</code> 警告（黄色）</li><li><code>.has-error</code> 错误（红色）</li><li><code>.has-success</code> 成功（绿色）</li></ul><p>若想显示相应的icon，只需在上面的属性基础上添加</p><ul><li><code>.has-feedback</code> </li></ul><p>同时必须在表单中添加一个<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'glyphicon glyphicon-warning-sign/glyphicon-ok/glyphicon-remove form-control-feedback'</span>&gt;</span></div></pre></td></tr></table></figure></p><p>元素</p><h3 id="表单提示信息"><a href="#表单提示信息" class="headerlink" title="表单提示信息"></a>表单提示信息</h3><ul><li><code>.help-block</code> 块状提示信息</li></ul><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul><li><code>.btn</code> 基本按钮</li><li><code>.btn-default</code> 默认按钮 <em>在<code>.btn</code>基础上添加</em></li></ul><p>//强烈建议使用button或a标签来制作按钮</p><h3 id="定制风格"><a href="#定制风格" class="headerlink" title="定制风格"></a>定制风格</h3><ul><li><code>.btn-primary</code> 主要按钮</li><li><code>.btn-success</code> 成功按钮</li><li><code>.btn-info</code> 信息按钮</li><li><code>.btn-waring</code> 警告按钮</li><li><code>.btn-danger</code> 危险按钮</li><li><code>.btn-link</code> 链接按钮</li></ul><h3 id="按钮大小"><a href="#按钮大小" class="headerlink" title="按钮大小"></a>按钮大小</h3><ul><li><code>.btn-lg</code> 大型按钮</li><li><code>.btn-sm</code> 小型按钮</li><li><code>.btn-xs</code> 超小型按钮</li></ul><h3 id="块状按钮"><a href="#块状按钮" class="headerlink" title="块状按钮"></a>块状按钮</h3><ul><li><code>.btn-block</code> 可以让按钮充满整个容器</li></ul><h3 id="按钮状态－活动状态"><a href="#按钮状态－活动状态" class="headerlink" title="按钮状态－活动状态"></a>按钮状态－活动状态</h3><p>对于<code>&lt;button&gt;</code>元素添加伪类实现</p><ul><li><code>:hover</code> 悬浮状态</li><li><code>:active</code> 点击状态</li><li><code>:focus</code> 焦点状态</li></ul><p>对于<code>&lt;a&gt;</code>元素通过添加相应的类实现</p><h3 id="按钮状态－禁用状态"><a href="#按钮状态－禁用状态" class="headerlink" title="按钮状态－禁用状态"></a>按钮状态－禁用状态</h3><ul><li>在标签中添加<code>disabled</code>属性，可以禁止元素的默认行为</li><li>或添加类名<code>.disabled</code>，不会禁止按钮的默认行为</li></ul><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ul><li><code>.img-responsive</code> 响应式图片</li><li><code>.img-rounded</code> 圆角图片</li><li><code>.img-circle</code> 圆形图片</li><li><code>.img-thumbnail</code> 缩略图片</li></ul><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul><li><code>.glyphicon</code> </li></ul><p>所有icon都是以<code>glyphicon-</code>前缀的类名开始，然后后缀表示图标的名称。</p><h1 id="网格系统"><a href="#网格系统" class="headerlink" title="网格系统"></a>网格系统</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><img src="/2016/07/04/Bootstrap学习笔记/列.jpg" alt="列.jpg" title=""><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h2 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h2><ul><li>col-md-offset-* 向右偏移，星号代表要便宜的列组合数</li></ul><h2 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h2><ul><li><code>.col-md-push-*</code></li><li><code>.col-md-pull-*</code></li></ul><h1 id="菜单、按钮及导航"><a href="#菜单、按钮及导航" class="headerlink" title="菜单、按钮及导航"></a>菜单、按钮及导航</h1><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><ol><li><code>&lt;div&gt;</code> 添加<code>.dropdown</code></li><li><code>&lt;button&gt;</code> 添加<code>.dropdown-toggle</code> <code>data-toggle=&quot;dropdown&quot;</code></li><li><code>&lt;ul&gt;</code> 添加<code>.dropdown-menu</code></li></ol><h3 id="下拉分割线"><a href="#下拉分割线" class="headerlink" title="下拉分割线"></a>下拉分割线</h3><p>添加空的<code>&lt;li&gt;</code>并给这个<code>&lt;li&gt;</code>添加<code>.divider</code></p><h3 id="菜单标题"><a href="#菜单标题" class="headerlink" title="菜单标题"></a>菜单标题</h3><p><code>.dropdown-header</code></p><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><ul><li>在<code>&lt;ul&gt;</code>添加<code>.pull-left</code>或<code>.dropdown-menu-left</code> 默认是左对齐</li><li>在<code>&lt;ul&gt;</code>添加<code>.pull-right</code>或<code>.dropdown-menu-right</code> 右对齐</li></ul><h3 id="下拉菜单（菜单项状态）"><a href="#下拉菜单（菜单项状态）" class="headerlink" title="下拉菜单（菜单项状态）"></a>下拉菜单（菜单项状态）</h3><ul><li>:hover 悬浮状态</li><li>:focus 焦点状态</li><li>.active 当前状态</li><li>.disabled 禁用状态</li></ul><h2 id="按钮-1"><a href="#按钮-1" class="headerlink" title="按钮"></a>按钮</h2><h3 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h3><p><code>.btn-group</code></p><p><em>不管是用什么标签，<code>.btn-group</code>容器里的标签元素需要带有类名<code>.btn</code></em></p><h3 id="按钮工具栏"><a href="#按钮工具栏" class="headerlink" title="按钮工具栏"></a>按钮工具栏</h3><p>将按钮组<code>.btn-group</code>按组放在一个大的容器<code>.btn-toobar</code>中</p><ul><li><code>.btn-group-lg</code> 大按钮组</li><li><code>.btn-group-sm</code> 小按钮组</li><li><code>.btn-group-xs</code> 超小按钮组</li></ul><h3 id="嵌套分组"><a href="#嵌套分组" class="headerlink" title="嵌套分组"></a>嵌套分组</h3><p>下拉菜单和普通按钮排列在一起，实现类似于导航菜单的效果，只需将<code>.dropdown</code>的容器换成<code>btn-group</code>。</p><h3 id="垂直分组"><a href="#垂直分组" class="headerlink" title="垂直分组"></a>垂直分组</h3><p>只要把水平分组的<code>.btn-group</code>换成<code>.btn-group-vertical</code>即可</p><h3 id="等分按钮"><a href="#等分按钮" class="headerlink" title="等分按钮"></a>等分按钮</h3><p>只需在按钮组<code>.btn-group</code>追加<code>.btn-group-justified</code></p><h3 id="按钮下拉菜单"><a href="#按钮下拉菜单" class="headerlink" title="按钮下拉菜单"></a>按钮下拉菜单</h3><p>把<code>div.dropdown</code>换成<code>div.btn-group</code></p><h3 id="按钮的向上向下三角形"><a href="#按钮的向上向下三角形" class="headerlink" title="按钮的向上向下三角形"></a>按钮的向上向下三角形</h3><ul><li>在<code>&lt;button&gt;</code>标签中添加<code>&lt;span calss=&quot;caret&quot;&gt;&lt;/span&gt;</code> 向下三角形</li><li>在<code>.btn-group</code>类上追加<code>.dropup</code>向上三角形</li></ul><h3 id="向上弹起的下拉菜单"><a href="#向上弹起的下拉菜单" class="headerlink" title="向上弹起的下拉菜单"></a>向上弹起的下拉菜单</h3><ul><li>在<code>.btn-group</code>类上添加<code>.dropup</code></li><li>如果是普通向上糖醋下拉菜单，只需在<code>.dropdown</code>添加<code>.dropup</code></li></ul><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h3 id="导航类型"><a href="#导航类型" class="headerlink" title="导航类型"></a>导航类型</h3><ul><li><code>.nav-tabs</code> 在原导航<code>.nav</code>上追加此类名</li><li><code>.nav-pills</code> 胶囊形导航</li><li><code>.nav-stacked</code> 垂直堆叠导航<em>注意：在胶囊形导航基础上添加</em></li><li><code>nav-justified</code> 自适应导航。需要配合<code>.nav-pills</code>或<code>.nav-stacked</code>一起使用</li></ul><h3 id="导航加下拉菜单（二级导航）"><a href="#导航加下拉菜单（二级导航）" class="headerlink" title="导航加下拉菜单（二级导航）"></a>导航加下拉菜单（二级导航）</h3><ul><li>只需将li当作父容器，实用类名<code>.dropdown</code>，同时在<code>li</code>中嵌套另一个列表<code>ul</code>。</li><li>为ol添加<code>.breadcrumb</code>类 面包屑式导航</li></ul><h1 id="导航条，分页导航"><a href="#导航条，分页导航" class="headerlink" title="导航条，分页导航"></a>导航条，分页导航</h1><h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><h3 id="基础导航条"><a href="#基础导航条" class="headerlink" title="基础导航条"></a>基础导航条</h3><ol><li>首先中执着导航的列表<code>（&lt;ul class=&quot;nav&quot;）</code>基础上添加类名<code>navbar-nav</code></li><li>在列表外部添加一个容器<code>(div)</code>，并且使用类名<code>navbar</code>和<code>navbar-default</code></li></ol><h3 id="为导航条添加标题、二级菜单及状态"><a href="#为导航条添加标题、二级菜单及状态" class="headerlink" title="为导航条添加标题、二级菜单及状态"></a>为导航条添加标题、二级菜单及状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="带表单的导航条"><a href="#带表单的导航条" class="headerlink" title="带表单的导航条"></a>带表单的导航条</h3><p><code>.navbar-form</code></p><h3 id="导航条中的按钮、文本和链接"><a href="#导航条中的按钮、文本和链接" class="headerlink" title="导航条中的按钮、文本和链接"></a>导航条中的按钮、文本和链接</h3><p>除了navbar-brand中的a元素和navbar-nav的ul和navbar-form 之外，还可以使用其他元素</p><ul><li><code>.navbar-btn</code> 导航条中的按钮</li><li><code>.navbar-text</code> 导航条中的文本</li><li><code>.navbar-link</code> 导航条中的普通链接</li></ul><p><em>需要配合navbar-brand,navbar-nav使用，且数量不能超过2个</em></p><h3 id="固定导航条"><a href="#固定导航条" class="headerlink" title="固定导航条"></a>固定导航条</h3><ul><li><code>.navbar-fixed-top</code>  导航条固定住浏览器窗口顶部</li><li><code>.navbar-fixed-bottom</code> 导航条固定住浏览器窗口底部</li></ul><p>由于导航条默认高度是50px，页面主内容顶部和底部都被固定导航条给遮住了，解决办法:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">    padding-top:70px;/*有顶部固定导航条时设置*/</div><div class="line">    padding-bottom:70px;/*有底部固定导航条时设置*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="响应式导航条"><a href="#响应式导航条" class="headerlink" title="响应式导航条"></a>响应式导航条</h3><ol><li>保证主窄屏时需要折叠的内容必须包裹在带一个div内，并且为这个div加入<code>.collapse``.navbar-collapse</code>两个类名。最后再为这个div 添加一个类名或id名。</li><li><p>保证在窄屏时要显示的图标样式（固定写法）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>并为button添加data-target=”.类名／#id名”（由需要折叠的div决定）</p></li></ol><h3 id="反色导航条"><a href="#反色导航条" class="headerlink" title="反色导航条"></a>反色导航条</h3><p>在默认导航条基础上，将<code>navbar-deafult</code>换成<code>navbar-inverse</code></p><h3 id="分页导航（带页码的分页导航）"><a href="#分页导航（带页码的分页导航）" class="headerlink" title="分页导航（带页码的分页导航）"></a>分页导航（带页码的分页导航）</h3><ul><li>带页码的分页导航</li><li>带翻页的分页导航</li></ul><p>在<code>ul</code>标签上加入<code>.pagination</code>即可<br>大小设置：</p><ol><li>pagination-lg 让分页导航变大</li><li>pagination-sm 让分页导航变小</li></ol><h3 id="分页导航（翻页分页导航）"><a href="#分页导航（翻页分页导航）" class="headerlink" title="分页导航（翻页分页导航）"></a>分页导航（翻页分页导航）</h3><p>在<code>ul</code>标签上加入<code>.pager</code>即可<br>对齐样式设置：<br>在<code>&lt;li&gt;</code>标签内添加：</p><ol><li>previous：让上一步按钮居左</li><li>next: 让下一步按钮居右</li></ol><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>为需要加标签的标签后，加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>new<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p><p>颜色样式设置：</p><ul><li><code>.label-deafult</code> 默认标签，深灰色</li><li><code>.label-primary</code> 主要标签，深蓝色</li><li><code>.label-success</code> 成功标签，绿色</li><li><code>.label-info</code> 信息标签，浅蓝色</li><li><code>.label-warning</code> 警告标签，橙色</li><li><code>.label-danger</code> 错误标签，红色</li></ul><h2 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h2><p>使用<code>badge</code>样式来实现<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>index<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="其他内置组件"><a href="#其他内置组件" class="headerlink" title="其他内置组件"></a>其他内置组件</h1><h2 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h2><ol><li>通过<code>.thumbnail</code>样式配合网格系统来实现</li><li>在缩略图的基础上添加一个div名为<code>.caption</code>的容器，放置标题，文本描述，按钮等。</li></ol><h2 id="警示框"><a href="#警示框" class="headerlink" title="警示框"></a>警示框</h2><h3 id="警示框样式"><a href="#警示框样式" class="headerlink" title="警示框样式"></a>警示框样式</h3><p><em>在<code>.alert</code>样式基础上追加：</em></p><ul><li><code>.alert-success</code> 成功警示框</li><li><code>.alert-info</code> 信息警示框</li><li><code>.alert-warning</code> 警告警示框</li><li><code>.alert-danger</code> 错误警示框</li></ul><h3 id="可关闭的警示框"><a href="#可关闭的警示框" class="headerlink" title="可关闭的警示框"></a>可关闭的警示框</h3><ol><li>在<code>.alert</code>样式基础上添加<code>.alert-dismissable</code></li><li>在<code>button</code>标签中加入<code>class=&quot;close&quot;</code></li><li>要确保关闭按钮元素上设置了自定义属性:<code>&quot;data-dismiss=&quot;alert&quot;&quot;</code></li></ol><h3 id="警示框的链接"><a href="#警示框的链接" class="headerlink" title="警示框的链接"></a>警示框的链接</h3><p>通过给警示框的链接添加一个名为<code>.alert-link</code>的类名</p><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><h3 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h3><ul><li>外容器用<code>.progress</code></li><li>子容器用<code>.progress-bar</code>,style=”width:40%”</li></ul><p>进阶版：</p><ul><li><code>role=&quot;progressbar&quot;</code>：告诉搜索引擎这个div的作用时进度条</li><li><code>aria-valuenow=&quot;40&quot;</code>: 当前进度条的进度为40%</li><li><code>aria-valuemin=&quot;0&quot;</code>: 进度条的最小值为0%</li><li><code>aria-valuemax=&quot;100&quot;</code>: 进度条的最大值为100%</li></ul><h3 id="彩色进度条"><a href="#彩色进度条" class="headerlink" title="彩色进度条"></a>彩色进度条</h3><ul><li><code>.progress-bar-info</code>:信息进度条，蓝色</li><li><code>progress-bar-success</code>:成功进度条，绿色</li><li><code>progress-bar-warning</code>:警告进度条，黄色</li><li><code>progress-bar-danger</code>:错误进度条，红色</li></ul><h3 id="条纹进度条"><a href="#条纹进度条" class="headerlink" title="条纹进度条"></a>条纹进度条</h3><p>在外容器<code>.progress</code>基础上添加<code>.progress-striped</code></p><h3 id="动态条纹进度条"><a href="#动态条纹进度条" class="headerlink" title="动态条纹进度条"></a>动态条纹进度条</h3><p>在<code>条纹进度条</code>基础上加上<code>.active</code></p><h3 id="层叠进度条"><a href="#层叠进度条" class="headerlink" title="层叠进度条"></a>层叠进度条</h3><p>总宽度不超过100%即可</p><h3 id="带label的进度条"><a href="#带label的进度条" class="headerlink" title="带label的进度条"></a>带label的进度条</h3><p>只需在进度条中添加需要的值即可</p><h2 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h2><h3 id="默认媒体对象"><a href="#默认媒体对象" class="headerlink" title="默认媒体对象"></a>默认媒体对象</h3><img src="/2016/07/04/Bootstrap学习笔记/media.jpg" alt="media.jpg" title=""><ul><li><code>.media</code> 媒体对象的容器</li><li><code>.media-object</code> 媒体对象的对象，通常是图片</li><li><code>.media-body</code> 主体内容，常常是图片侧边内容</li><li><code>.media-heading</code> 媒体对象的标题，可选</li></ul><p>还常常使用<code>.pull-left</code>或<code>.pull-right</code>来控制媒体对象的浮动方式</p><h3 id="媒体对象的嵌套"><a href="#媒体对象的嵌套" class="headerlink" title="媒体对象的嵌套"></a>媒体对象的嵌套</h3><p>只需将另一个媒体对象结构放置在媒体对象的主题内容<code>.media-body</code>里即可</p><h3 id="媒体对象列表"><a href="#媒体对象列表" class="headerlink" title="媒体对象列表"></a>媒体对象列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"media-list"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h2><h3 id="基础列表组"><a href="#基础列表组" class="headerlink" title="基础列表组"></a>基础列表组</h3><ul><li>list-group 列表组容器，常用的是ul，也可以是ol，div</li><li>list-group-item 列表项，常用的是li，也可以是div</li></ul><h3 id="带徽章的列表组"><a href="#带徽章的列表组" class="headerlink" title="带徽章的列表组"></a>带徽章的列表组</h3><p>只需在<code>.list-group-item</code>中添加徽章组件<code>.badge</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>98<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="带链接的列表组"><a href="#带链接的列表组" class="headerlink" title="带链接的列表组"></a>带链接的列表组</h3><ol><li>将<code>ul.list-group</code>使用<code>div.list-group</code>来替换</li><li>用<code>a.list-group-item</code>替换<code>li.list-group-item</code></li></ol><h3 id="自定义列表组"><a href="#自定义列表组" class="headerlink" title="自定义列表组"></a>自定义列表组</h3><ul><li>list-group-item-heading</li><li>list-group-item-text</li></ul><h3 id="列表项的状态设置"><a href="#列表项的状态设置" class="headerlink" title="列表项的状态设置"></a>列表项的状态设置</h3><ul><li>active 表示当前状态</li><li>disabled 表示禁用状态</li></ul><h3 id="多彩列表组"><a href="#多彩列表组" class="headerlink" title="多彩列表组"></a>多彩列表组</h3><p>在list-group-item基础上添加即可</p><ul><li>list-group-item-success</li><li>list-group-item-info</li><li>list-group-item-warning</li><li>list-group-item-danger</li></ul><h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><h3 id="基础面板"><a href="#基础面板" class="headerlink" title="基础面板"></a>基础面板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>基础面板</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="带有头和尾的面板"><a href="#带有头和尾的面板" class="headerlink" title="带有头和尾的面板"></a>带有头和尾的面板</h3><ul><li>panel-heading 头部</li><li>panel-footer 尾部</li></ul><h3 id="色彩面板"><a href="#色彩面板" class="headerlink" title="色彩面板"></a>色彩面板</h3><ul><li>panel-primary: 重点蓝</li><li>panel-success: 成功绿</li><li>panel-info: 信息蓝</li><li>panel-warning: 警告黄</li><li>panel-danger: 危险红</li></ul><h3 id="面板中嵌套表格"><a href="#面板中嵌套表格" class="headerlink" title="面板中嵌套表格"></a>面板中嵌套表格</h3><p>在panel-body所在的div外面添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="面板中的嵌套列表组"><a href="#面板中的嵌套列表组" class="headerlink" title="面板中的嵌套列表组"></a>面板中的嵌套列表组</h3><p>直接添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>即可</p><h1 id="导入JavaScript插件"><a href="#导入JavaScript插件" class="headerlink" title="导入JavaScript插件"></a>导入JavaScript插件</h1><ul><li>transition.js 动画过度</li><li>modal.js 模态弹窗</li><li>dropdown.js 下拉菜单</li><li>scrollspy.js 滚动侦测</li><li>tab.js 选项卡</li><li>tooltop.js 提示框</li><li>popover.js 弹出框</li><li>alert.js 警告框</li><li>button.js 按钮</li><li>collapse.js 折叠／手风琴</li><li>carousel.js 图片轮播</li><li>affix.js 自动定位浮标</li></ul><h2 id="动画过渡"><a href="#动画过渡" class="headerlink" title="动画过渡"></a>动画过渡</h2><ul><li>模态弹出窗的滑动和渐变效果</li><li>选项卡的渐变效果</li><li>警告框的渐变效果</li><li>图片轮播的滑动效果</li></ul><h2 id="模态弹出框"><a href="#模态弹出框" class="headerlink" title="模态弹出框"></a>模态弹出框</h2><h3 id="弹出窗三样式："><a href="#弹出窗三样式：" class="headerlink" title="弹出窗三样式："></a>弹出窗三样式：</h3><ul><li>modal</li><li>modal-dialog</li><li>modal-content 弹出窗的真正内容都放置在此</li></ul><p>modal-content包含三部分：</p><ul><li>modal-header 主要包含标题和关闭按钮</li><li>modal-body 弹出框的主要内容</li><li>modal-footer 主要放置操作按钮</li></ul><h3 id="大小样式"><a href="#大小样式" class="headerlink" title="大小样式"></a>大小样式</h3><ul><li>modal-lg 大尺寸样式</li><li>modal-sm 小尺寸样式</li></ul><h3 id="触发模态弹出窗的两种方法"><a href="#触发模态弹出窗的两种方法" class="headerlink" title="触发模态弹出窗的两种方法"></a>触发模态弹出窗的两种方法</h3><ul><li>声明式触发法</li></ul><ol><li>声明两个必要的属性：data-toggle=”modal”(必须)和data-target=”#mymodal” </li><li>data-target可以设置为css的选择符，也可以设置为模态弹窗的id值。</li></ol><ul><li>链接<code>&lt;a&gt;</code>元素，可以使用链接元素自带的<code>href</code>属性替代data-target属性<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">href</span>=<span class="string">"#mymodal"</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><em>建议使用第一种方式</em></p><h3 id="为弹出框增加过渡动画效果"><a href="#为弹出框增加过渡动画效果" class="headerlink" title="为弹出框增加过渡动画效果"></a>为弹出框增加过渡动画效果</h3><p>可通过为”.modal”增加类名”.fade”为模态弹出框增加过渡效果</p><h3 id="模态弹出框的使用-data-参数说明"><a href="#模态弹出框的使用-data-参数说明" class="headerlink" title="模态弹出框的使用(data-参数说明)"></a>模态弹出框的使用(data-参数说明)</h3><img src="/2016/07/04/Bootstrap学习笔记/data-参数说明.jpg" alt="data-参数说明.jpg" title=""><h3 id="模拟弹出框的使用（JavaScript触发）"><a href="#模拟弹出框的使用（JavaScript触发）" class="headerlink" title="模拟弹出框的使用（JavaScript触发）"></a>模拟弹出框的使用（JavaScript触发）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        $(<span class="string">".btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $(<span class="string">"#mymodal"</span>).modal();</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h3 id="JavaScript触发时的参数设置"><a href="#JavaScript触发时的参数设置" class="headerlink" title="JavaScript触发时的参数设置"></a>JavaScript触发时的参数设置</h3><img src="/2016/07/04/Bootstrap学习笔记/JavaScript触发时的参数设置.jpg" alt="JavaScript触发时的参数设置.jpg" title=""><p>参数设置：<br><img src="/2016/07/04/Bootstrap学习笔记/参数设置.png" alt="参数设置.png" title=""><br>事件设置：<br><img src="/2016/07/04/Bootstrap学习笔记/事件设置.png" alt="事件设置.png" title=""></p><h2 id="下拉菜单-1"><a href="#下拉菜单-1" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data-toggle="dropdown"</div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;排版&quot;&gt;&lt;a href=&quot;#排版&quot; class=&quot;headerlink&quot; title=&quot;排版&quot;&gt;&lt;/a&gt;排版&lt;/h1&gt;&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以使用&lt;code&gt;&amp;lt;h1&amp;gt;...&amp;lt;h6&amp;gt;&lt;/code&gt;,也可以使用类名h1~h6&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;制作副标题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;段落&quot;&gt;&lt;a href=&quot;#段落&quot; class=&quot;headerlink&quot; title=&quot;段落&quot;&gt;&lt;/a&gt;段落&lt;/h2&gt;&lt;p&gt;默认字号:14p，line-height:1,42857143，颜色为深灰色，字体为sans-serif(可根据需要进行修改)&lt;br&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令及常见问题(持续更新)</title>
    <link href="http://yoursite.com/2016/07/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/07/03/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2016-07-03T10:26:17.000Z</published>
    <updated>2016-07-13T13:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-push-每次都要输入用户名和密码"><a href="#git-push-每次都要输入用户名和密码" class="headerlink" title="git push 每次都要输入用户名和密码"></a>git push 每次都要输入用户名和密码</h3><p>解决办法：<br><code>git config --global credential.helper store</code></p><h3 id="获取id-rsa-pub"><a href="#获取id-rsa-pub" class="headerlink" title="获取id_rsa.pub"></a>获取id_rsa.pub</h3><p>解决办法:<br><code>cd ~/.ssh</code><br><code>ls</code><br><code>cat ~/.ssh/id_rsa.pub</code><br><a id="more"></a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;git-push-每次都要输入用户名和密码&quot;&gt;&lt;a href=&quot;#git-push-每次都要输入用户名和密码&quot; class=&quot;headerlink&quot; title=&quot;git push 每次都要输入用户名和密码&quot;&gt;&lt;/a&gt;git push 每次都要输入用户名和密码&lt;/h3&gt;&lt;p&gt;解决办法：&lt;br&gt;&lt;code&gt;git config --global credential.helper store&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取id-rsa-pub&quot;&gt;&lt;a href=&quot;#获取id-rsa-pub&quot; class=&quot;headerlink&quot; title=&quot;获取id_rsa.pub&quot;&gt;&lt;/a&gt;获取id_rsa.pub&lt;/h3&gt;&lt;p&gt;解决办法:&lt;br&gt;&lt;code&gt;cd ~/.ssh&lt;/code&gt;&lt;br&gt;&lt;code&gt;ls&lt;/code&gt;&lt;br&gt;&lt;code&gt;cat ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;br&gt;</summary>
    
    
    
    <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
    <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>《锋利的jQuery》笔记</title>
    <link href="http://yoursite.com/2016/07/03/%E9%94%8B%E5%88%A9%E7%9A%84jQueryy%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/03/%E9%94%8B%E5%88%A9%E7%9A%84jQueryy%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-02T16:00:00.000Z</published>
    <updated>2016-07-06T09:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-认识jQuery"><a href="#第一章-认识jQuery" class="headerlink" title="第一章 认识jQuery"></a>第一章 认识jQuery</h1><h3 id="jQuery对象转DOM对象方法，-index-和get-index"><a href="#jQuery对象转DOM对象方法，-index-和get-index" class="headerlink" title="jQuery对象转DOM对象方法，[index]和get(index)"></a>jQuery对象转DOM对象方法，[index]和get(index)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cr = $cr[<span class="number">0</span>];  </div><div class="line"><span class="keyword">var</span> cr = $cr.get[<span class="number">0</span>]; </div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">### DOM对象转jQuery对象方法，只需用$()包装即可</div><div class="line"></div><div class="line">`<span class="string">``</span>JavaScript</div><div class="line"><span class="keyword">var</span> $cr = $(cr);</div></pre></td></tr></table></figure><h3 id="解决jQuery和其他库的冲突"><a href="#解决jQuery和其他库的冲突" class="headerlink" title="解决jQuery和其他库的冲突"></a>解决jQuery和其他库的冲突</h3><ul><li>jQuery库其他库之后导入<br><em>1. 调用jQuery.noConflict()函数</em><br><em>2. 自定义快捷方式</em></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $j=jQuery.noConflict();</div></pre></td></tr></table></figure><ul><li>jQuery库在其他库之前导入<br><em>直接使用jQuery即可</em></li></ul><a id="more"></a><h1 id="第二章-jQuery选择器"><a href="#第二章-jQuery选择器" class="headerlink" title="第二章 jQuery选择器"></a>第二章 jQuery选择器</h1><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul><li>#id</li><li>.class</li><li>element</li><li>*</li><li>selector1,selector2,……,selectorN</li></ul><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><ul><li>$(“ancestor descendant”)</li><li>$(“parent&gt;child”)</li><li>$(“prev+next”)=next();</li><li>$(“prev~siblings”)=nextAll();</li></ul><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h4 id="（一）基本过滤选择器"><a href="#（一）基本过滤选择器" class="headerlink" title="（一）基本过滤选择器"></a>（一）基本过滤选择器</h4><ul><li>:first</li><li>:last</li><li>:not(selector)</li><li>:even</li><li>:odd</li><li>:eq(index)(index从0开始，下同）</li><li>:gt(index)</li><li>:lt(index)</li><li>:heater</li><li>:animated</li><li>:focus</li></ul><h4 id="（二）内容过滤选择器"><a href="#（二）内容过滤选择器" class="headerlink" title="（二）内容过滤选择器"></a>（二）内容过滤选择器</h4><ul><li>:contains(text)</li><li>:empty(不包含子元素或文本的空元素）</li><li>:has(selector)</li><li>:parent(含有子元素或文本的元素）</li></ul><h4 id="（三）可见性过滤选择器"><a href="#（三）可见性过滤选择器" class="headerlink" title="（三）可见性过滤选择器"></a>（三）可见性过滤选择器</h4><ul><li>:hidden</li><li>:visible</li></ul><h4 id="（四）属性过滤选择器"><a href="#（四）属性过滤选择器" class="headerlink" title="（四）属性过滤选择器"></a>（四）属性过滤选择器</h4><ul><li>:[attribute]</li><li>:[attribute=value]</li><li>:[attribute!=value]</li><li>:[attribute^=value]</li><li>:[attribute$=value]</li><li>:[attribute*=value]</li><li>:[attribute|=value]</li><li>:[attribute~=value]（空格）</li><li>:[attribute1][attribute2][attributeN]</li></ul><h4 id="（五）子元素过滤选择器"><a href="#（五）子元素过滤选择器" class="headerlink" title="（五）子元素过滤选择器"></a>（五）子元素过滤选择器</h4><ul><li>nth-child(index/even/odd/equation)（index从1开始）</li><li>:first-child</li><li>:last-child</li><li>:only-child</li></ul><h4 id="（六）表单对象过滤选择器"><a href="#（六）表单对象过滤选择器" class="headerlink" title="（六）表单对象过滤选择器"></a>（六）表单对象过滤选择器</h4><ul><li>:enabled</li><li>:disabled</li><li>:checked</li><li>:selected</li></ul><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><ul><li>:input</li><li>:text（单行文本框）</li><li>:password</li><li>:radio</li><li>:checkbox</li><li>:submit</li><li>:image(图像按钮)</li><li>:reset</li><li>:button</li><li>:file</li><li>:hidden</li></ul><p><i><code>注意：$(&quot;.text :hidden&quot;)选取的是class为text元素里面的隐藏元素，而$(&quot;.text:hidden&quot;)选取的是隐藏的class为text元素。</code></i></p><h1 id="第三章-jQuery中的DOM操作"><a href="#第三章-jQuery中的DOM操作" class="headerlink" title="第三章 jQuery中的DOM操作"></a>第三章 jQuery中的DOM操作</h1><h2 id="一、创建元素节点"><a href="#一、创建元素节点" class="headerlink" title="一、创建元素节点"></a>一、创建元素节点</h2><p>使用工厂函数$( )即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $li_1 = $(<span class="string">"&lt;li&gt;香蕉&lt;/li&gt;"</span>);</div></pre></td></tr></table></figure></p><h2 id="二、插入节点"><a href="#二、插入节点" class="headerlink" title="二、插入节点"></a>二、插入节点</h2><ul><li>append()（元素内部）</li><li>appendTo()（与append相反）</li><li>prepend()</li><li>prependTo()</li><li>after()（元素之后）</li><li>insertAfter()</li><li>before()</li><li>insertBefore()</li></ul><h2 id="三、删除节点"><a href="#三、删除节点" class="headerlink" title="三、删除节点"></a>三、删除节点</h2><ul><li>remove() 使用该方法，该节点所包含的所有后代节点将同时被删除，返回值是一个指向已被删除的节点的引用。</li><li>detach() 这个方法不会把匹配的元素从jQuery对象中删除，可以在将来再使用。所有绑定的事件、附加的数据都会保留下来。</li><li>empty() 它能清空所有后代的节点。注意是后代节点。</li></ul><h2 id="四、复制节点"><a href="#四、复制节点" class="headerlink" title="四、复制节点"></a>四、复制节点</h2><ul><li>clone() 被复制的新元素不具有任何行为</li><li>clone(true) 复制元素同时绑定元素的事件</li></ul><h2 id="五、替换节点"><a href="#五、替换节点" class="headerlink" title="五、替换节点"></a>五、替换节点</h2><ul><li>replaceWith()</li><li>replaceAll()<br>两方法作用相同，只是顺序颠倒</li></ul><h2 id="六、包裹节点"><a href="#六、包裹节点" class="headerlink" title="六、包裹节点"></a>六、包裹节点</h2><ul><li>wrap()</li><li>wrapAll()</li><li>wrapInner()</li></ul><h2 id="七、属性操作"><a href="#七、属性操作" class="headerlink" title="七、属性操作"></a>七、属性操作</h2><ul><li>attr() 获取和设置属性</li><li>removeAttr() 删除属性</li></ul><h2 id="八、样式操作"><a href="#八、样式操作" class="headerlink" title="八、样式操作"></a>八、样式操作</h2><ul><li>addClass() 追加样式</li><li>removeClass() 移除样式</li><li>toggleClass() 切换样式</li><li>hasClass()</li></ul><p><i><code>注意：hasClass(&quot;another&quot;) = is(&quot;.another&quot;),一般用后者。</code></i></p><h2 id="九、设置和获取HTML、文本和值"><a href="#九、设置和获取HTML、文本和值" class="headerlink" title="九、设置和获取HTML、文本和值"></a>九、设置和获取HTML、文本和值</h2><ul><li>html() 类似于js的innerHTML</li><li>text() 读取或设置元素文本内容</li><li>val() 设置或获取元素的值;  能使select、checkbox、radio相应的选项被选中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#single"</span>).val(<span class="string">"选择2号"</span>);</div></pre></td></tr></table></figure><p>defaultValue属性包含表单元素的初始值。</p><h2 id="十、遍历节点"><a href="#十、遍历节点" class="headerlink" title="十、遍历节点"></a>十、遍历节点</h2><ul><li>children() 该方法只考虑子元素，而不考虑其后代元素</li><li>next() 后面紧邻的同辈元素</li><li>prev() 前面紧邻的同辈元素</li><li>siblings() 前后所有的同辈元素</li><li>closest() 最近的匹配元素（当前元素-父元素-父父元素……)，只返回匹配的第一个元素节点</li><li>parent() 元素的父节点</li><li>parents() 元素的多个父节点</li></ul><h2 id="十一、CSS-DOM操作"><a href="#十一、CSS-DOM操作" class="headerlink" title="十一、CSS-DOM操作"></a>十一、CSS-DOM操作</h2><ul><li>css() 与attr()方法类似</li><li>height() 获取的是元素在页面中的实际高度</li><li>width() 同上，实际宽度</li><li>offset() 获取元素在当前视窗的相对偏移，返回top和left</li><li>position() 获取元素相对于最近的一个position样式属性设置为relative或absolute的祖父节点的相对偏移</li><li>scrollTop()和scrollLeft() 获取元素滚动条距顶端的距离和距左侧的距离</li></ul><h1 id="第四章-jQuery中的事件和动画"><a href="#第四章-jQuery中的事件和动画" class="headerlink" title="第四章 jQuery中的事件和动画"></a>第四章 jQuery中的事件和动画</h1><h2 id="一、事件绑定"><a href="#一、事件绑定" class="headerlink" title="一、事件绑定"></a>一、事件绑定</h2><ul><li>bind()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind(type,[data],fn)</div></pre></td></tr></table></figure><h2 id="二、合成事件"><a href="#二、合成事件" class="headerlink" title="二、合成事件"></a>二、合成事件</h2><ul><li>hover() 模拟光标悬停事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hover(enter,leave)</div></pre></td></tr></table></figure><ul><li>toggle() 模拟鼠标连续单击事件； 切换元素的可见状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">toggle(fn1,fn2,...fn)</div></pre></td></tr></table></figure><h2 id="三、防止事件冒泡"><a href="#三、防止事件冒泡" class="headerlink" title="三、防止事件冒泡"></a>三、防止事件冒泡</h2><ul><li>为函数添加一个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"element"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure><ul><li>event.stopPropagation() 停止冒泡</li><li>event.preventDefault() 阻止默认行为</li></ul><p><code>如果想同时对事件对象停止冒泡和默认行为，可以在事件处理函数中返回false，这是对上面两函数的简写方式。</code></p><h2 id="四、事件对象的属性"><a href="#四、事件对象的属性" class="headerlink" title="四、事件对象的属性"></a>四、事件对象的属性</h2><ul><li>event.type 事件类型</li><li>event.target 获取触发事件的元素</li><li>event.relatedTarget moseover与mouseout事件相关元素</li><li>event.pageX与event.pageY 光标相对于页面的x坐标和y坐标</li><li>event.which 鼠标点击事件中鼠标的左中右键（1，2，3）</li><li>event.metaKey 键盘事件中获取<ctrl>按键</ctrl></li></ul><h2 id="五、移除事件"><a href="#五、移除事件" class="headerlink" title="五、移除事件"></a>五、移除事件</h2><ul><li>unbind() 移除事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unbind([type],[data]);第一个参数是事件类型，第二个是将要移除的函数。</div></pre></td></tr></table></figure><ul><li>one() 只触发一次，随后立即解除绑定</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">one([type,[data],fn);</div></pre></td></tr></table></figure><h2 id="六、模拟操作及其他方法"><a href="#六、模拟操作及其他方法" class="headerlink" title="六、模拟操作及其他方法"></a>六、模拟操作及其他方法</h2><ul><li>trigger() 模拟用户操作 trigger(type,[data]) 第二个参数是要传递给事件处理函数的附加数据，以数组形式传递。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"myClick"</span>,[<span class="string">"我的自定义"</span>,<span class="string">"事件"</span>]);</div></pre></td></tr></table></figure><blockquote><p>该方法触发事件后，会执行浏览器默认操作，若不想执行浏览器的默认操作，可以使用triggerHandler();</p></blockquote><ul><li>bind() 可同时绑定多个事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind(<span class="string">"mouseover mouseout"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure><ul><li>添加命名空间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind(<span class="string">"click.plugin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure><ul><li>trigger()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trigger(<span class="string">"click!"</span>);匹配所有不包含在命名空间的click方法</div></pre></td></tr></table></figure><h2 id="八、动画"><a href="#八、动画" class="headerlink" title="八、动画"></a>八、动画</h2><ul><li>show()和hide() 为一个元素调用hide()方法，会将该元素的display样式改为”none”</li><li>fadeIn()和fadeOut() 只改变元素的不透明度</li><li>slideUp()和slideDown() 只改变元素的高度</li><li>自定义动画 animate(params,speed.callback); params指的是一个包含样式属性及值的映射</li></ul><p><strong>注意：使用animate()方法之前，必须把元素的position样式设为relative或absolute</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animate(&#123;left:<span class="string">"500px"</span>,height:<span class="string">"400px"</span>&#125;,<span class="number">3000</span>);</div></pre></td></tr></table></figure></p><ul><li>stop() 停止动画</li></ul><blockquote><p>stop([clearQueue],[gotoEnd]);clearQueue代表是否要清空未执行完的动画队列，gotoEnd代表是否直接将正在执行的动画跳转到末状态。</p></blockquote><ul><li>is(“:animated”) 判断元素是否正处于动画状态</li><li>delay() 延迟动画</li><li>toggle() 切换元素的可见状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">toggle(speed,[callback])</div></pre></td></tr></table></figure><ul><li>slideToggle() 只调整元素的高度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">slideToggle(speed,[easing],[callback])</div></pre></td></tr></table></figure><ul><li>fadeTo() 把元素的不透明度以渐进方式调整到指定的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fadeTo(speed,opacity,[callback])</div></pre></td></tr></table></figure><ul><li>fadeToggle() 通过不透明度变化切换元素的可见性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fadeToggle(speed,[easing],[callback])</div></pre></td></tr></table></figure><h1 id="第五章-jQuery对表单、表格的操作及更多应用"><a href="#第五章-jQuery对表单、表格的操作及更多应用" class="headerlink" title="第五章 jQuery对表单、表格的操作及更多应用"></a>第五章 jQuery对表单、表格的操作及更多应用</h1><ul><li>prop()</li></ul><p><strong>注意：1. 只添加属性名称该属性就会生效应该使用prop();  2. 只存在true/false的属性应该使用prop()。因此disabled和checked之类属性应该使用prop()。</strong></p><ul><li>this表作用域</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$("#select1").dbclick(function()&#123;  </div><div class="line">    var $options = $("option:selected",this);  </div><div class="line">    $options.appendTo('"#select2");</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>each() 遍历</li><li>filter() 筛选</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filter(<span class="string">":contains('李')"</span>).show();</div></pre></td></tr></table></figure><style>i {color:#FF0000;}</style>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第一章-认识jQuery&quot;&gt;&lt;a href=&quot;#第一章-认识jQuery&quot; class=&quot;headerlink&quot; title=&quot;第一章 认识jQuery&quot;&gt;&lt;/a&gt;第一章 认识jQuery&lt;/h1&gt;&lt;h3 id=&quot;jQuery对象转DOM对象方法，-index-和get-index&quot;&gt;&lt;a href=&quot;#jQuery对象转DOM对象方法，-index-和get-index&quot; class=&quot;headerlink&quot; title=&quot;jQuery对象转DOM对象方法，[index]和get(index)&quot;&gt;&lt;/a&gt;jQuery对象转DOM对象方法，[index]和get(index)&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cr = $cr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cr = $cr.get[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;` &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;### DOM对象转jQuery对象方法，只需用$()包装即可&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;``&lt;/span&gt;JavaScript&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $cr = $(cr);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决jQuery和其他库的冲突&quot;&gt;&lt;a href=&quot;#解决jQuery和其他库的冲突&quot; class=&quot;headerlink&quot; title=&quot;解决jQuery和其他库的冲突&quot;&gt;&lt;/a&gt;解决jQuery和其他库的冲突&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jQuery库其他库之后导入&lt;br&gt;&lt;em&gt;1. 调用jQuery.noConflict()函数&lt;/em&gt;&lt;br&gt;&lt;em&gt;2. 自定义快捷方式&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $j=jQuery.noConflict();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;jQuery库在其他库之前导入&lt;br&gt;&lt;em&gt;直接使用jQuery即可&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>SASS学习笔记</title>
    <link href="http://yoursite.com/2016/07/02/SASS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/02/SASS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-02T15:20:14.000Z</published>
    <updated>2016-07-09T07:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-安装"><a href="#mac-安装" class="headerlink" title="mac 安装"></a>mac 安装</h1><pre>sudo gem install sass</pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><pre>sass test.scss test.css</pre><h3 id="四种默认风格"><a href="#四种默认风格" class="headerlink" title="四种默认风格"></a>四种默认风格</h3><ul><li>nested：嵌套缩进，它是默认值。</li><li>expanded: 无缩进无扩展</li><li>compact: 简洁风格</li><li>compressed: 压缩后的，一般使用这项</li></ul><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>以$开头<br>若变量镶嵌在字符串中需要写在#{}中</p><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>注意属性嵌套，属性后面加：<br>使用&amp;引用父元素</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>/* */</li><li>//</li><li>/*! */重要注释任何模式都会保留</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>@extend+空格＋要继承的选择器</p><h3 id="Mixin"><a href="#Mixin" class="headerlink" title="Mixin"></a>Mixin</h3><p>@Mixin 定义可重复使用的代码块<br>@include 引用该代码块</p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>内置了颜色函数<br>lighten(#cc3,10%)</p><h3 id="插入文件"><a href="#插入文件" class="headerlink" title="插入文件"></a>插入文件</h3><p>@import</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>@if<br>@else</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>@for<br>@while<br>@each</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>@function<br>@return</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mac-安装&quot;&gt;&lt;a href=&quot;#mac-安装&quot; class=&quot;headerlink&quot; title=&quot;mac 安装&quot;&gt;&lt;/a&gt;mac 安装&lt;/h1&gt;&lt;pre&gt;sudo gem install sass&lt;/pre&gt;

&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;pre&gt;sass test.scss test.css&lt;/pre&gt;

&lt;h3 id=&quot;四种默认风格&quot;&gt;&lt;a href=&quot;#四种默认风格&quot; class=&quot;headerlink&quot; title=&quot;四种默认风格&quot;&gt;&lt;/a&gt;四种默认风格&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;nested：嵌套缩进，它是默认值。&lt;/li&gt;
&lt;li&gt;expanded: 无缩进无扩展&lt;/li&gt;
&lt;li&gt;compact: 简洁风格&lt;/li&gt;
&lt;li&gt;compressed: 压缩后的，一般使用这项&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="SASS" scheme="http://yoursite.com/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>HEXO常用命令、常见问题及技巧汇总</title>
    <link href="http://yoursite.com/2016/07/02/HEXO%E9%97%AE%E9%A2%98%E5%8F%8A%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2016/07/02/HEXO%E9%97%AE%E9%A2%98%E5%8F%8A%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/</id>
    <published>2016-07-02T07:30:00.000Z</published>
    <updated>2016-07-09T07:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g <span class="comment">//安装</span></div><div class="line">npm update hexo -g <span class="comment">//升级</span></div><div class="line">hexo init <span class="comment">//初始化</span></div><div class="line">hexo n <span class="comment">//新建文章</span></div><div class="line">hexo p <span class="comment">//发布你的草稿</span></div><div class="line">hexo s <span class="comment">//启动服务器预览</span></div><div class="line">hexo g <span class="comment">//生成静态网页</span></div><div class="line">hexo d <span class="comment">//部署</span></div><div class="line">hexo c <span class="comment">//清除缓存</span></div></pre></td></tr></table></figure><h3 id="1-TypeError-Cannot-read-property-‘replace’-of-undefined"><a href="#1-TypeError-Cannot-read-property-‘replace’-of-undefined" class="headerlink" title="1. TypeError: Cannot read property ‘replace’ of undefined"></a>1. TypeError: Cannot read property ‘replace’ of undefined</h3><p>   解决办法：<br>   重新初始化hexo。  <code>hexo init</code></p><h3 id="2-hexo-deploy-没动静"><a href="#2-hexo-deploy-没动静" class="headerlink" title="2. hexo deploy 没动静"></a>2. hexo deploy 没动静</h3><p>   解决办法：<br>   在站点的<code>_config.yml</code>文件中找到<code>deploy:</code>标签，在每个冒号后面必须要加上空格。</p><h3 id="3-部署找不到git"><a href="#3-部署找不到git" class="headerlink" title="3. 部署找不到git"></a>3. 部署找不到git</h3><p>   解决办法：<br>   <code>npm install hexo-deployer-git --save</code><br><a id="more"></a></p><h3 id="4-图片使用"><a href="#4-图片使用" class="headerlink" title="4. 图片使用"></a>4. 图片使用</h3><p>   解决办法：<br>   <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">CodeFalling/hexo-asset-image</a><br>   在hexo目录，执行<br>   <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install hexo -g &lt;span class=&quot;comment&quot;&gt;//安装&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm update hexo -g &lt;span class=&quot;comment&quot;&gt;//升级&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo init &lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo n &lt;span class=&quot;comment&quot;&gt;//新建文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo p &lt;span class=&quot;comment&quot;&gt;//发布你的草稿&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo s &lt;span class=&quot;comment&quot;&gt;//启动服务器预览&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo g &lt;span class=&quot;comment&quot;&gt;//生成静态网页&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d &lt;span class=&quot;comment&quot;&gt;//部署&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo c &lt;span class=&quot;comment&quot;&gt;//清除缓存&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;1-TypeError-Cannot-read-property-‘replace’-of-undefined&quot;&gt;&lt;a href=&quot;#1-TypeError-Cannot-read-property-‘replace’-of-undefined&quot; class=&quot;headerlink&quot; title=&quot;1. TypeError: Cannot read property ‘replace’ of undefined&quot;&gt;&lt;/a&gt;1. TypeError: Cannot read property ‘replace’ of undefined&lt;/h3&gt;&lt;p&gt;   解决办法：&lt;br&gt;   重新初始化hexo。  &lt;code&gt;hexo init&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-hexo-deploy-没动静&quot;&gt;&lt;a href=&quot;#2-hexo-deploy-没动静&quot; class=&quot;headerlink&quot; title=&quot;2. hexo deploy 没动静&quot;&gt;&lt;/a&gt;2. hexo deploy 没动静&lt;/h3&gt;&lt;p&gt;   解决办法：&lt;br&gt;   在站点的&lt;code&gt;_config.yml&lt;/code&gt;文件中找到&lt;code&gt;deploy:&lt;/code&gt;标签，在每个冒号后面必须要加上空格。&lt;/p&gt;
&lt;h3 id=&quot;3-部署找不到git&quot;&gt;&lt;a href=&quot;#3-部署找不到git&quot; class=&quot;headerlink&quot; title=&quot;3. 部署找不到git&quot;&gt;&lt;/a&gt;3. 部署找不到git&lt;/h3&gt;&lt;p&gt;   解决办法：&lt;br&gt;   &lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;&lt;br&gt;</summary>
    
    
    
    <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
    <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>《深入浅出JavaScript》笔记</title>
    <link href="http://yoursite.com/2016/07/02/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAJavaScript%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/07/02/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAJavaScript%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2016-07-01T16:00:00.000Z</published>
    <updated>2016-07-06T09:37:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章存储数据"><a href="#第一章存储数据" class="headerlink" title="第一章存储数据"></a>第一章存储数据</h1><p>JavaScript使用三种基本数据类型text,number,boolean<br>用const创建常量，常量以全大写字母命名  </p><ul><li>parseInt()和parseFloat()</li><li>toFix() 四舍五入到小数点后两位</li><li>isNaN() 检查是否为数字</li></ul><a id="more"></a><h2 id="第二章-探索客户端"><a href="#第二章-探索客户端" class="headerlink" title="第二章 探索客户端"></a>第二章 探索客户端</h2><ul><li>setTimeout() 单次定时器</li><li>setInterval() 间隔定时器</li><li>clearInterval() 清除间隔定时器</li><li>document.body.clientHeight</li><li>document.body.clientWidth 客户端窗口宽度<em>客户端窗口只是浏览器窗口里呈现网页的部分，不包含标题栏工具栏</em></li><li>onload事件 在页面或图像加载完成后立即发生</li><li>onresize 浏览器有任何尺寸修改时触发</li><li>readCookie()、writeCookie()、eraseCookie()</li></ul><h1 id="第三章-决策"><a href="#第三章-决策" class="headerlink" title="第三章 决策"></a>第三章 决策</h1><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch/case"></a>switch/case</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(test data)&#123;</div><div class="line">    <span class="keyword">case</span> match1: <span class="comment">//冒号</span></div><div class="line">    statement;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    ...</div><div class="line">    default:</div><div class="line">    statement;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="第四章-循环"><a href="#第四章-循环" class="headerlink" title="第四章 循环"></a>第四章 循环</h1><ul><li>break 立即跳出循环</li><li>continue 强迫循环跳入下一轮</li></ul><h1 id="第五章-函数"><a href="#第五章-函数" class="headerlink" title="第五章 函数"></a>第五章 函数</h1><blockquote><p>函数其实只是“值”引用到函数主体的变量，函数名称也被称为函数引用。</p></blockquote><h1 id="第六章-表单与验证"><a href="#第六章-表单与验证" class="headerlink" title="第六章 表单与验证"></a>第六章 表单与验证</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li>. 匹配任何字符，换行符除外  </li><li>\s 匹配空格    </li><li>\d 匹配数字  </li><li>^ 字符串需以模式起始  </li><li>\w 匹配任何字母数字（字母或数字）字符  </li><li>$ 字符串需以模式结束  </li></ul><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul><li>* 限定符前的子模式必须出现0或多次  </li><li>+ 限定符前的子模式必须出现1或多次  </li><li>{n} 限定符前的字模式必须出现n次</li><li>? 限定符前的子模式必须出现0或1次  </li><li>()集合字符或/和元字符，为字模式  </li><li>{min,max}子模式必须出现至少min次，不可多于max次  </li></ul><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>[CharacterClass] 字符类是一组匹配单一字符的正则表达式</p><h1 id="第七章-利用DOM分割HTML"><a href="#第七章-利用DOM分割HTML" class="headerlink" title="第七章 利用DOM分割HTML"></a>第七章 利用DOM分割HTML</h1><ul><li>innerHTML 用于获取和设置网页内容</li><li>nodeValue 存储于节点的值，只限文本与属性节点使用（不含元素）</li><li>nodeType 节点类型，用代号表示1，2，3….</li><li>childNode 包含节点下所有子节点的数组，以出现在HTML代码中的顺序而排列</li><li>firstChild 节点下第一个子节点</li><li>lastChild 节点下的最后一个子节点</li></ul><h2 id="二、改变节点三步骤"><a href="#二、改变节点三步骤" class="headerlink" title="二、改变节点三步骤"></a>二、改变节点三步骤</h2><ul><li>removeChild() 移除所有子节点</li><li>creatTextNode() 根据新内容创建新的文本节点</li><li>appendChild() 把新创建的文本子节点附加在节点下</li></ul><h2 id="三、改变元素样式类"><a href="#三、改变元素样式类" class="headerlink" title="三、改变元素样式类"></a>三、改变元素样式类</h2><ul><li>className 提供对元素样式类的访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="built_in">document</span>.getElementById(<span class="string">"decision1"</span>).className);</div></pre></td></tr></table></figure><ul><li>节点的style特性提供对单一样式特性的访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">style:"visibility:hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div></pre></td></tr></table></figure><h1 id="第八章-为数据带来生命"><a href="#第八章-为数据带来生命" class="headerlink" title="第八章 为数据带来生命"></a>第八章 为数据带来生命</h1><h2 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h2><p>对象在一个储存容易内链接变量与函数<br>变量称为对象的特性，函数称为对象的方法</p><h2 id="二、标准JavaScript对象"><a href="#二、标准JavaScript对象" class="headerlink" title="二、标准JavaScript对象"></a>二、标准JavaScript对象</h2><ul><li>Date 在Date对象里，时间以毫秒数表达</li><li>String</li><li>Array</li></ul><h2 id="三、构造函数负责创建对象"><a href="#三、构造函数负责创建对象" class="headerlink" title="三、构造函数负责创建对象"></a>三、构造函数负责创建对象</h2><p>以构造函数创建对象时，我们使用new运算符<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> invitation = <span class="keyword">new</span> Invitation&#123;<span class="string">"Somebody"</span>,<span class="string">"Something"</span>,<span class="string">"Sometime"</span>,<span class="string">"Somewhere"</span>&#125;;</div></pre></td></tr></table></figure></p><p>构造函数大部分工作就是创建对象的特性（需要使用关键字this，还有对象的初始值。)<br>构造函数虽然确立了对象的设计，但实际上并未创建任何事物，直到使用new运算符调用构造函数，才创建了对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">body,date</span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.body = body;</div><div class="line"><span class="keyword">this</span>.date = date;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> blogEntry = <span class="keyword">new</span> Blog(<span class="string">"Got the new cube I ordered..."</span>,<span class="string">"08/14/2008"</span>);</div></pre></td></tr></table></figure><ul><li>toString() 每个对象都具有toString()方法，它试图为对象提供文本字符串版的表达方式。</li><li>getMonth()<strong>切记：月份从0开始</strong></li><li>getDate()</li><li>getFullYear()</li></ul><h2 id="四、字符串方法"><a href="#四、字符串方法" class="headerlink" title="四、字符串方法"></a>四、字符串方法</h2><ul><li>indexOf() 寻找字符串是否包含特定子字符串, 字符串索引从0开始，中间的标点或空格算一格，起始位置的引号不算</li><li>charAt() 寻找特定字符在字符串里的位置,只搜索特定字符</li><li>toLowerCase()与toUpperCase() 转换字符串为小写或大写的</li></ul><h2 id="五、Math方法"><a href="#五、Math方法" class="headerlink" title="五、Math方法"></a>五、Math方法</h2><ul><li>round() 把浮点数四舍五入为整数</li><li>floor() 把浮点数无条件舍去为整数</li><li>ceil() 把浮点数无条件进位为整数</li><li>rondom() 产生介于0与1间的随机数</li><li>PI 常量,3.14</li></ul><h1 id="第八章-创建自定义对象"><a href="#第八章-创建自定义对象" class="headerlink" title="第八章 创建自定义对象"></a>第八章 创建自定义对象</h1><h2 id="一、对象类"><a href="#一、对象类" class="headerlink" title="一、对象类"></a>一、对象类</h2><p>是对象的描述，一份描绘对象构成的模板。</p><h2 id="二、对象实例"><a href="#二、对象实例" class="headerlink" title="二、对象实例"></a>二、对象实例</h2><p>根据模板创建的事物  </p><blockquote><p>类就像建筑蓝图，实例则是房子，可以根据类建造很多实例。 方法没有复制到实例的必要性。</p></blockquote><h2 id="三、prototype（原型）对象用于设定隶属于类层的特性和方法，而非属于实例的。"><a href="#三、prototype（原型）对象用于设定隶属于类层的特性和方法，而非属于实例的。" class="headerlink" title="三、prototype（原型）对象用于设定隶属于类层的特性和方法，而非属于实例的。"></a>三、prototype（原型）对象用于设定隶属于类层的特性和方法，而非属于实例的。</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Blog.prototype.toHTML = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">...</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> blgoEntry1 = <span class="keyword">new</span> Blog(<span class="string">"Not much going on."</span>,...);</div><div class="line">blogEntry1.toHTML();</div></pre></td></tr></table></figure><p><strong>对象命名的唯一原则，只有首写字母大写。</strong></p><h2 id="四、类特性也能共享"><a href="#四、类特性也能共享" class="headerlink" title="四、类特性也能共享"></a>四、类特性也能共享</h2><blockquote><p>类特性（class property)与类拥有的实例方法很相似，他们都隶属于类，只有单一一份可供所有实例访问。类特性在类里储存一次，但能被所有实例访问。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Blog.prototype.signature = <span class="string">"Puzzler Ruby"</span>;</div></pre></td></tr></table></figure><h2 id="五、类拥有的实例方法"><a href="#五、类拥有的实例方法" class="headerlink" title="五、类拥有的实例方法"></a>五、类拥有的实例方法</h2><p>它虽然属于类，但能访问实例特性<br>类特性的引用方式与一般实例特性一样this.signature</p><h2 id="六、prototype对象能扩展内置JavaScript对象"><a href="#六、prototype对象能扩展内置JavaScript对象" class="headerlink" title="六、prototype对象能扩展内置JavaScript对象"></a>六、prototype对象能扩展内置JavaScript对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.scramble = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">...</div><div class="line">&#125;;  </div><div class="line"><span class="comment">//调用  </span></div><div class="line">alert(<span class="keyword">this</span>.signature.scramble());</div><div class="line"><span class="built_in">Date</span>.prototype.shortFormat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(<span class="keyword">this</span>.getMonth()+<span class="number">1</span>)+<span class="string">'/'</span>+<span class="keyword">this</span>.getDate()+<span class="string">"/"</span>+<span class="keyword">this</span>.getFullYear();</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="七、类方法"><a href="#七、类方法" class="headerlink" title="七、类方法"></a>七、类方法</h2><p>为类所有，但无法访问实例特性的方法，但能访问类特性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg.1  </span></div><div class="line">Blog.showSignature = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"This blog created by "</span> + Blog.prototype.signature + <span class="string">"."</span>);</div><div class="line"><span class="comment">//eg.2  </span></div><div class="line">Blog.blogSorter = <span class="function"><span class="keyword">function</span>(<span class="params">blog1,blog2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> blog2.date - blog1.date;</div><div class="line">&#125;;  </div><div class="line"><span class="comment">//调用  </span></div><div class="line">blog.sort(Blog.blogSorter);</div></pre></td></tr></table></figure></p><p>当某个自变量未被传给函数、方法或构造函数时，在任何试图使用自变量值的代码里，它的值都是null。</p><h1 id="第九章-AJAX"><a href="#第九章-AJAX" class="headerlink" title="第九章 AJAX"></a>第九章 AJAX</h1><blockquote><p>XML没有定义任何标签与属性——它只是一组标签与属性该如何创建与使用的规则。<br>XHTML中的所有空标签都需要加上空格与反斜线</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This is just a sentence.&lt;br /&gt;</div></pre></td></tr></table></figure><h2 id="AjaxRequest"><a href="#AjaxRequest" class="headerlink" title="AjaxRequest"></a>AjaxRequest</h2><blockquote><p>自定义AjaxRequest对象提供了使用Ajax，但不直接面对XMLHttpRequest对象的便利方式。</p></blockquote><ul><li>getReadyState() 检查请求状态</li><li>getStatus()</li><li>getResponseText() 以纯文本的格式取得Ajax响应里的访问。</li><li>getResponseXML() 以结构XML代码的格式取得Ajax响应里的数据。</li><li>send(type,url,handler,postDataType,postData)</li></ul><blockquote><p>type:GET或POST。<br>GET：获取数据，但不改变服务器上的任何事物。<br>POST：传送数据至服务器，但会造成服务器上的改变。</p></blockquote><ul><li>url:服务器的url  </li><li>handler:用于处理响应的回调函数  </li><li>postDataType：被传输的数据类型（只用于POST，GET不需要）  </li><li>postData:被传输的数据（中用于POST，GET不需要）  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajaxReq = <span class="keyword">new</span> AjaxRequest();</div><div class="line">ajaxReq.send(<span class="string">"GET"</span>,<span class="string">"blog.xml"</span>,handleRequest);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBlog</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"blog"</span>).innerHTML=<span class="string">"&lt;img src='wait.gif' alt='loading '/&gt;"</span>;</div><div class="line">    ajaxReq.send(<span class="string">'GET'</span>,<span class="string">'blog.xml'</span>,handleRequest);</div><div class="line">&#125;</div><div class="line"><span class="comment">//eg.</span></div><div class="line"><span class="built_in">Date</span>.prototype.shortFormat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>) + <span class="string">"/"</span> + <span class="keyword">this</span>.getDate() + <span class="string">"/"</span> + <span class="keyword">this</span>.getFullYear();</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initForm</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"date"</span>).value = (<span class="keyword">new</span> <span class="built_in">Date</span>()).shortFormat();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第一章存储数据&quot;&gt;&lt;a href=&quot;#第一章存储数据&quot; class=&quot;headerlink&quot; title=&quot;第一章存储数据&quot;&gt;&lt;/a&gt;第一章存储数据&lt;/h1&gt;&lt;p&gt;JavaScript使用三种基本数据类型text,number,boolean&lt;br&gt;用const创建常量，常量以全大写字母命名  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parseInt()和parseFloat()&lt;/li&gt;
&lt;li&gt;toFix() 四舍五入到小数点后两位&lt;/li&gt;
&lt;li&gt;isNaN() 检查是否为数字&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://yoursite.com/2016/07/01/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/07/01/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2016-08-13T07:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>用# 表示标题的级别，一个为一级（注意#后面的空格）<br>如<i><code>#</code></i>表一级标题</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre>![图片名]( 图片链接 )</pre><p><img src="http://news.xinhuanet.com/forum/2013-01/17/124242504_101n.jpg" alt="周星驰"></p><a id="more"></a><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>-或*后加空格再加文字表无序列表</p><ul><li>土豆</li><li>西红柿</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>文字前直接加1. 2. 3. 即可</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>文本前加&gt;表引用</p><blockquote><p>学好JavaScript走遍天下都不怕</p></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>和图片类似，只是去掉前面的感叹号<br><a href="www.douban.com">豆瓣</a></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>用一个*包围文字即为斜体</p><p><em>这是斜体</em></p><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>和斜体类似，只是多了一个*包围</p><p><strong>这是粗体</strong></p><h2 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h2><p>使用3个反单引号包围代码框<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> tips = <span class="built_in">document</span>.getElementById(<span class="string">"tips"</span>);</div><div class="line"><span class="keyword">var</span> label = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"label"</span>)[<span class="number">0</span>];</div><div class="line">label.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">tips.style.display = <span class="string">"block"</span></div><div class="line">&#125;;</div><div class="line">label.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">tips.style.display = <span class="string">"none"</span></div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个*</p><hr><style>i{color:#FF4040;}</style>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;用# 表示标题的级别，一个为一级（注意#后面的空格）&lt;br&gt;如&lt;i&gt;&lt;code&gt;#&lt;/code&gt;&lt;/i&gt;表一级标题&lt;/p&gt;
&lt;h2 id=&quot;图片&quot;&gt;&lt;a href=&quot;#图片&quot; class=&quot;headerlink&quot; title=&quot;图片&quot;&gt;&lt;/a&gt;图片&lt;/h2&gt;&lt;pre&gt;![图片名]( 图片链接 )&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://news.xinhuanet.com/forum/2013-01/17/124242504_101n.jpg&quot; alt=&quot;周星驰&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://yoursite.com/categories/前端/"/>
    
    
    <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>寻找刘半农墓</title>
    <link href="http://yoursite.com/2016/03/24/%E5%AF%BB%E6%89%BE%E5%88%98%E5%8D%8A%E5%86%9C%E5%A2%93/"/>
    <id>http://yoursite.com/2016/03/24/%E5%AF%BB%E6%89%BE%E5%88%98%E5%8D%8A%E5%86%9C%E5%A2%93/</id>
    <published>2016-03-24T07:55:08.000Z</published>
    <updated>2016-07-07T12:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2014年在北京期间的一篇旧文</p></blockquote><h2 id="“刘半农？你没他电话？？！”"><a href="#“刘半农？你没他电话？？！”" class="headerlink" title="“刘半农？你没他电话？？！”"></a>“刘半农？你没他电话？？！”</h2><p>刘半农墓在玉皇顶，不大好找，于是一路问人：“您好，请问你知道刘半农墓怎么走吗？”“谁？刘半农？你没他电话？？！”“没有，没有。。。”</p><p>百度地图只能显示离墓很近的玉皇顶停车场，<br><img src="/2016/03/24/寻找刘半农墓/百度地图.jpg" alt="百度地图.jpg" title=""></p><p>（图片说明：红标1处为停车场，蓝标是马连良墓，从蓝到红步行大概需20分钟）<br><a id="more"></a></p><h2 id="小卖铺"><a href="#小卖铺" class="headerlink" title="小卖铺"></a>小卖铺</h2><p>到达停车场之后继续往前行走大概三百米左右能看到一个岔路口，岔路左侧是一家小卖铺，<br><img src="/2016/03/24/寻找刘半农墓/小卖铺.jpg" alt="小卖铺.jpg" title=""><br>（图片说明：左侧是小卖铺）</p><h2 id="游人止步"><a href="#游人止步" class="headerlink" title="游人止步"></a>游人止步</h2><p>继续往前走300米，会看到一个小山包，小山包的围墙上写着“游人止步”，<br><img src="/2016/03/24/寻找刘半农墓/游人止步.jpg" alt="游人止步.jpg" title=""></p><p>（图片说明：游人止步）</p><h2 id="养蜂场"><a href="#养蜂场" class="headerlink" title="养蜂场"></a>养蜂场</h2><p>刘半农墓就在这个山顶，看到”游人止步“牌继续往前走往100米左右，右侧会看到一个铁门，左侧是一家养蜂场。</p><img src="/2016/03/24/寻找刘半农墓/养蜂场.jpg" alt="养蜂场.jpg" title=""><p>（图片说明：左侧为养蜂场，从右侧铁门上山）</p><h2 id="刘天华墓"><a href="#刘天华墓" class="headerlink" title="刘天华墓"></a>刘天华墓</h2><p>走进铁门，然后沿着小道，一直向上冲，记住是向上，不是左或右，一直到达山顶，即可看到刘天华、刘半农兄弟的墓了。爬山的过程视个人体力不同大概需30分钟，为什么我这次找刘半农墓花了很长时间并几乎耗尽了精力呢，因为第一次我爬了3/4的距离，花了大概30分钟，我感觉已经很累了，但仍没有任何迹象和标志显示前方会有刘半农墓，于是下山继续问人，又得到另一条线路，不过很快证明不对。第三次问当地居民，告知我爬到第一级防火道就能看到，于是我又拖着疲惫的双腿爬了半小时，终于到达山顶，看到了刘半农、刘天华兄弟和祁耿寰的墓地。<br><img src="/2016/03/24/寻找刘半农墓/刘天华墓.jpg" alt="刘天华墓.jpg" title=""><br>（图片说明：刘天华墓，右上角是祁耿寰的墓）</p><h2 id="刘半农墓"><a href="#刘半农墓" class="headerlink" title="刘半农墓"></a>刘半农墓</h2><img src="/2016/03/24/寻找刘半农墓/刘半农墓.jpg" alt="刘半农墓.jpg" title=""><p>（图片说明：刘半农的墓碑使用的是篆体）</p><h2 id="刘半农墓全貌"><a href="#刘半农墓全貌" class="headerlink" title="刘半农墓全貌"></a>刘半农墓全貌</h2><p>刘半农的墓碑正面使用的是篆体，很多人不仔细看根本不认识这几个字，所以虽然爬这个山的人不少，但你问10个人，有9个半不知道这是谁的墓，这也是导致我第一次放弃的缘故，问了好几个人都说没看到刘半农墓。</p><img src="/2016/03/24/寻找刘半农墓/刘半农墓全貌.jpg" alt="刘半农墓全貌.jpg" title=""><p>（图片说明：刘半农墓全貌）</p><h2 id="防火道"><a href="#防火道" class="headerlink" title="防火道"></a>防火道</h2><p>我到达山顶不久，一家长带小孩也来到墓前，问道，这是哪个烈士的墓，我告诉他这是北大一位很有名的教授。于是我在心里嘀咕为什么不能在这个墓碑旁边树立个小牌子，对刘半农做一点简单介绍呢。正在这时，一直晴空万里的天突然下起大雨来，难道是刘半农听到我的心里话了？还好雨虽大，但并不密。于是赶紧下山，等我下到山底，太阳又露出了笑脸。。。</p><p>PS:这是刘半农墓后面的第一级防火道，是一条大马路，so 应该有其它可能更便捷的方式到刘半农墓，只是我还没弄明白。</p><img src="/2016/03/24/寻找刘半农墓/防火道.jpg" alt="防火道.jpg" title=""><p>（图片说明：第一级防火道）</p><h2 id="刘半农墓和第一级防火道"><a href="#刘半农墓和第一级防火道" class="headerlink" title="刘半农墓和第一级防火道"></a>刘半农墓和第一级防火道</h2><img src="/2016/03/24/寻找刘半农墓/刘半农墓与防火道距离.jpg" alt="刘半农墓与防火道距离.jpg" title=""><p>（图片说明：刘半农墓和第一级防火道的距离）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2014年在北京期间的一篇旧文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;“刘半农？你没他电话？？！”&quot;&gt;&lt;a href=&quot;#“刘半农？你没他电话？？！”&quot; class=&quot;headerlink&quot; title=&quot;“刘半农？你没他电话？？！”&quot;&gt;&lt;/a&gt;“刘半农？你没他电话？？！”&lt;/h2&gt;&lt;p&gt;刘半农墓在玉皇顶，不大好找，于是一路问人：“您好，请问你知道刘半农墓怎么走吗？”“谁？刘半农？你没他电话？？！”“没有，没有。。。”&lt;/p&gt;
&lt;p&gt;百度地图只能显示离墓很近的玉皇顶停车场，&lt;br&gt;&lt;img src=&quot;/2016/03/24/寻找刘半农墓/百度地图.jpg&quot; alt=&quot;百度地图.jpg&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（图片说明：红标1处为停车场，蓝标是马连良墓，从蓝到红步行大概需20分钟）&lt;br&gt;</summary>
    
    
    
    <category term="游记" scheme="http://yoursite.com/categories/游记/"/>
    
    
    <category term="名人墓" scheme="http://yoursite.com/tags/名人墓/"/>
    
  </entry>
  
</feed>
